Version 2.07
	○不具合修正
	・NU_SC_TASK_LOADABLEのスペルミスを修正
	・nuboot.cの関数idle内で、関数ポインタnuIdleFuncがコンパイラの
	  最適化により、レジスタ値として扱われるため、アプリケーション
	  からのnuIdleFunc関数の登録が有効にならない不具合を修正しました。

Version 2.06
	◯デフォルトのグラフィックスマイクロコードの変更
	・これまでF3DEX系のマイクロコードをデフォルトとしていましたが、
	  このバージョンからF3DEX2をデフォルトのマイクロコードに変更しました。
	  そのため、"F3DEX_GBI_2"をnusys.h内で定義しています。
	  ただし、F3DEX_GBIが定義されている場合は、F3DEX_GBI_2を定義
	  しないようにしています。F3DEX系を使用する場合は、
	  アプリケーションのソースのコンパイルオプション等でF3DEX_GBIを
	  定義してください（NuSystem側は変更する必要はありません）

	◯マイクロコードのFIFOバッファまわりの変更
	・グラフィックスマイクロコードのFIFOバッファを、
	  ユーザでサイズと場所を設定できるように変更しました。
	  設定関数は、nuGfxSetUcodeFifoを追加しました。
	  これに伴い、nuGfInit,nuGfxInitEX2を変更しました。

	◯ブートコードの追加と変更
	・OS2.0Kから開発環境毎の初期化がされるようになり、osInitialize関数が
	  マクロかされました。
	  この変更にともない、NuSystemでも、それぞれの開発環境用の初期化
	  コードを含むようにnuboot.cのオブジェクトコードを追加しました。
	  追加したのは次の通り。

	  ROM用
	  nusys_rom.o

	  ROMデバッグ用
	  nusys.o nusys_ptn.o nusys_isv.o nusys_emu.o nusys_msp.o

	  デバッグ用
	  nusys_d.o nusys_ptn_d.o nusys_isv_d.o nusys_emu_d.o nusys_msp_d.o

	  nusys.o,nusys_d.oは、自動認識を行います。
	  nusys_rom.oは、_FINALROMをdefineしています。
	  nusys_isv.o,nusys_isv_d.oは、ISV64をdefineしています。
	  nusys_ptn.o,nusys_ptn_d.oは、PTN64をdefineしています。
	  nusys_msp.o,nusys_msp_d.oは、MWN64をdefineしています。


	◯不具合修正
	・nuContMgrInit関数でエラー時に内部変数bitmaskがシフトされず、
	  値が不正になる不具合を修正。

Version 2.05
	◯コンパイル環境の変更
	・これまでIndy(Irix5.3)でライブラリを作成していましが、
	  O2(Irix6.3)で作成するようにしました。

	◯追加機能
	・処理がどの程度かかっているか分かるように、パフォーマンスメータに
	  現在の処理位置を表示できるように nuDebPerfMarkSet関数を追加。
	  （だいぶ前の要望ですが、やっと実装いたしました。遅くなって
	   すいません）
	  nuDebTaskPerfBar0,nuDebTaskPerfBar1でマークが表示されます。
	  ただし、nuDebTaskPerfBar1の場合、タスクバーが処理時間の総和を
	  表示しているのに対して、リトレースタイミングからの時間を
	  表します（つまりnuDebTaskPerfBar0と同じです）。
	  戻り値として、リトレースからの経過時間をusecで返します。

	・パフォーマンスの計測間隔を設定するnuDebTaskPerfIntervalSet関数を
	  追加しました。この値を１以上に設定すると、パフォーマンスメータが
	  見やすくなると思います。

	・オーバレイ用のPI転送関数、nuPiReadRomOverlay関数を追加しました。


	◯変更点
	・nusched.cで、フレームバッファの空き待ちの部分に不具合が
	  あったのを修正しました。

	・振動パックマネージャの不具合
	  振動パックの制御を行う変数nuContRmbCtlのメンバ変数を、複数の
	  スレッドから読み書きする可能性がありました。こららの変数は、
	  振動パックマネージャから読み書きされますが、別のスレッドで
	  呼び出される関数、nuContRmbModeSet()とnuContRmbCheck()内でも
	  読み書きしていました。このため、こららの関数で読み書きする場合、
	  割り込みを禁止するように変更しました。

	・nuaumgrex.cの不具合
	  nuaumgrex.cで、ローカル変数を未初期化のまま使用している部分があり、
          ０除算例外が発生する可能性がある不具合がありました。

	・HVQ対応のため、nuYieldBufのサイズを0x10増やし0xc10に変更しました。

	・nusys.hの外部変数宣言のうち、配列の数を含んでいたものを含まない
	  ように変更（構造体のメンバは除く）。

	・SIマネージャとグラフィックスタスクマネージャのスレッドIDが
	  重複していたので、SIマネージャのスレッドIDを変更しました。

	・デバッグコンソールの設定で、４つあるウインドウのうち
	  デフォルトではウインドウ０のみ表示で、あとは非表示に変更しましたが、
	  初期値の変更は混乱があるようなので、全ウインドウ表示に
	  戻しました。
	  ウインドウ１から３を表示しない場合は、nuDebConWindowShow関数で
	  非表示にしてください。無駄なCPUの処理時間を減らせます。

	・nugfxthrea.cのグラフィックスレッドのスレッド構造体の名前を
	  GfxThreadからnuGfxThreadに変更しグローバル変数にしました。
	  
	・nudebtaskperfbar0.c,nudebtaskperfbar0_ex2.cおよび
	  nudebtaskperfbar1.c,nudebtaskperfbar1_ex2.cはこれまでそれぞれ
	  同じ内容でF3DEX_GBI_2を定義する・しないの違いでした。しかし、
	  同じ変更や修正を２つのファイルに対しておこなう必要があり、
	 メンテナンス上問題がありましたので、includeするように変更しました。
	 （.cファイルをインクルードするのはあまり好きでないのですが）

	・nualsgi/nuaudma.cでPIを用いる場合、nuAuDebDmaCountが誤って
	  使われていたのを修正。

	・nualsgi/nuauseqplayerbankset.cで、シーケンスプレイヤーの0と1の
	  両方にバンクを設定していましたが、シーケンスプレイヤーを１つ
	  しか使わない場合に問題がありましたので、初期化しているか
	  どうかをチェックして設定するように変更しました。

	・こっそりVersionを埋め込みました。できれば削除しないように
	  してくださいね。


Version 2.04
	◯変更点
	・nupireadrom.cでPI関数を使う場合、読み込みサイズの指定が
	  されない場合があった個所を修正。ただしPI関数は、非推奨。

Version 2.03
	◯変更点
	・nuaumgr.c,nuaumgrex.c,nuaumgrparams.cのファイル間で同じ目的の
	  グローバル変数とスタティック変数が混じっていたのを整理。
          （RCSの操作ミスでファイル消失した時の復旧忘れです）

Version 2.02
	◯変更点
	・コントローラ読み込み関数の不具合修正
	  nuContDataReadStart関数およびnuContDataRead関数で、メッセージ送信
	  部分に問題があったので修正しました。
	
Version 2.01
	◯変更点

	・SRAMライト時の不具合修正
	  NuSystemのSRAMライト時にキャッシュをライトバックしない場合が
	  ありました。nuPiReadWriteSram関数のフラグにより、SRAMリード時には
	  キャッシュの無効化をおこない、ライト時にはライトバックをおこなう
	  ように修正しました。

	・リセットボタンを押しつづけるとノイズが発生する不具合の修正
	  PreNMI後28フレームで、musライブラリのオーディオスレッドに
	  リトレースメッセージを送らないようにし、
	  オーディオスレッドを止めるように変更しました。

	・nusys.hのスペルミスの訂正と追加
	  NU_RMON_THERAD_IDとなっていたのをNU_RMON_THREAD_IDに修正しました。
	  また、NU_RMON_STACK_SIZEの定義を追加しました。

	・nudebconprintf.cの変更
	  内部に未完成部分があり、コンパイル時にウォーニングが出ていましたが、
	  未完成部分を外しました。


Version 2.00
	◯スケジューラの変更点

	・PreNMIメッセージの取りこぼし防止の対処
	  PreNMIメッセージをあるタイミングで２度押しすると、
	  ２度めのPreNMIメッセージを取りこぼす場合がありました。
	  この場合、PreNMIメッセージの処理が行えず、最悪ハングアップ
	  してしまう可能性があります。
	  NuSystem Ver2.0では、PreNMIメッセージを受け取ると、
	  内部でそれを記録し、スケジューラにPreNMIメッセージを必要とする
	  クライアントが登録された時にPreNMIメッセージを送るように
	  改良しました。

	・PreNMIで必要な処理の実行
	  PreNMIメッセージ後、リセットがかかる２フレーム前頃に
	  スケジューラ内でYスケールを1.0にしosViBlack(FALSE)で画面を消し
	  さらに、osAfterPreNMI()を実行するようにしました。ただし、
	  必ずハングしないかチェックするようにしてください。

 	・グローバル変数nuScPreNMIFlagを追加
	  ここには、PreNMIメッセージを受け取るとNU_SC_GET_PRENMIを
	  セットします。
	  またリセット前３フレーム（PreNMIから0.5秒の３フレーム前）
	  になるとNU_SC_BEFORE_RESETをセットします。

	・リセット直前のRSPタスクの禁止
	  グローバル変数nuScPreNMIFlagがNU_SC_BEFORE_RESETの場合、
	  RSPタスクメッセージでタスクを起動しないように変更しました。
	  ただし、アプリケーションがハングしないようにRSPタスク終了メッセージ
	  は返します。

	・シングルフレームバッファの対応
	  これまで、シングルフレームバッファの場合、グラフィックス・タスク
	  起動時にフレームバッファの空き待ちで止まってしまったため、
	  シングルフレームバッファが使えませんでした。
	  そこで、フレームバッファ数を指定する関数nuScSetFrameBufferNum()を
	  追加しました。この関数の引数に１を指定した場合、フレームバッファの
	  状態をチェックしないようになります。１以外の場合は、
	  これまでと同じです。初期値は２にしてあります。

	・フレームレートの取得関数の追加
	  NUSched構造体にフレームレートを格納するframeBufferNumを追加しました。
	  ここには、スケジューラの初期化時に変数osTvTypeを用いてPALかそれ以外を
 	  調べ、50または60を格納します。この値は、関数nuScGetFrameRate()で
	  取得できます。ただし、osTvTypeを使った自動切替は禁止事項ですので、
	  画面の自動切替は行わないようにしてください。
	  
	・クライアントに送信するメッセージの変更する関数の追加
	  nuScAddClient()の引数に指定した、クライアントに送るメッセージの種類
	  を変更する関数nuScResetClientMesgType()を追加しました。


	◯オーディオの変更（nualsgi,nualsgi_n）

	・AIイベントを使ったオーディオマネージャの追加
	  AIイベントを使ってFIFOを制御するオーディオマネージャを
	  を追加しました（AIイベントは、FIFO構造になっているAI-DMA設定用
	  レジスタがフルからフルでない状態になった時に発生します）
	  このオーディオマネージャは、AIイベントでFIFOを切り替えるため
	  これまでのリトレースのみのものと異なり合成サンプルサイズの
	  調整が不要です。また、理論上はFIFOが空になることが無いため、
	  ノイズが発生することはありません。さらに合成サンプルデータの
	  バッファが２つ（これまでは３つ）で済みます。
	  ただし、合成サンプルデータのサイズは16（n_audioマイクロコードの
	  場合は184）の倍数にする必要があるため、AIイベントが発生する
	  タイミングが各フレームで変化し、オーディオ・タスクを起動する
	  タイミングがずれます。アプリでRSPの処理の空き時間を特定した
	  プログラムをしている場合、この点に気をつけるようにしてください。
	  （ある程度制御することは可能ですが、現バージョンでは組み込みません
	   でした）
	  このオーディオマネージャを使う場合は、nuAuInitEx()または、
	  nuAuMgrInitEx()を使って初期化をおこなってください。

	・オーディオマネージャの改良
	  リトレースのみを用いるオーディオマネージャでは、これまでFIFOの残り
	  のサンプル数から次の次のフレームにFIFOにセットするサンプルサイズを
	  求め制御していました。しかし、この方法では、制御の結果が反映される
	  のが２フレーム後になり、上手く制御ができていませんでした。
	  そのため、再生周波数により余剰サンプル数を調整する必要がありました。
	  そこで、FIFOの残りサンプル数に加え、次のフレームのサンプル数を
	  使って合成サンプルサイズを予測するように変更しました。
	  また、制御方法を、これまでは１フレーム分のサンプル数になるように
	  制御していましたが、1.25フレーム分のサンプル数になるように制御
	  するように変更しました。
	  さらに、これまで、FIFO設定、オーディオコマンド作成、オーディオタスク
	  起動の流れでオーディオを作成していたのを、FIFO設定、オーディオ
	  タスク起動、オーディオコマンド作成に変更し、オーディオ開始時に
	  DMAの転送が間に合わない場合があったのを修正しました。

	・消費メモリの削減
	  再生周波数とリトレースカウント、フレームレートから合成サンプル数を
	  計算し、その値でヒープメモリを確保するように変更しました。
	  またオーディオコマンドのサイズを見直しました。
	  さらにオーディオマネージャの処理を見直すことにより、消費する
	  メモリ量を大幅に減らしました。

	・コールバック時のPI-DMA処理の変更
	  これまで、フレームカウンタを用いてDMAバッファ領域を解放して
	  いましたが、それぞれにカウンタを設けて解放するようにしました。
	  また、保持するフレーム数を２から１に変更しました。これにより
	  要求されるDMAバッファ数が若干減らせるようになりました。

	・デバッグ・チューニング用の追加
	  DMAバッファの消費量、DMAのコールバック数、PI-DMA回数、オーディオ
	  コマンドリストのサイズの最大値を計測できるようにしました。
	  また、DMAバッファ数が足りない、オーディオコマンドリストバッファが
	  足りない、DMAバッファサイズが小さい、残りサンプル数が無いと
	  いった状態になった場合を、フラグに残すようにしました。

	・nuAuInit(),nuAuMgrInit()の変更
	  nuAuInit(),nuAuMgrInit()を使用ヒープサイズを返すように変更しました。

	・ヒープメモリ関数の追加
	  ヒープメモリの初期化、取得関数を追加。
	  また、ヒープメモリの使用サイズ、空きサイズの取得関数を追加。

	・audio,n_audioライブラリのソースの統一
	  これまでaudioマイクロコード用ライブラリとn_audioマイクロコード用
	  ライブラリは分かれていましたが、統一しました。

	・nualsgi_n.hの変更
	  nualsgi_n.hを、N_AUDIOの定義とnualsgi.hのインクルードおよび
	  n_audioマイクロコード用のヘッダのインクルードのみに変更しました。

	・PAL対応の変更
	  これまでPALに対応するには、ライブラリの再コンパイルが必要でしたが
	  スケジューラのフレームレート変数追加により、その変数を使って
	  パラメータを計算するように変更しました。そのため、PAL対応時に
	  再コンパイルが基本的には必要なくなります。



	◯オーディオの変更（musライブラリ）

	・musライブラリバージョン３の対応
	  musライブラリのバージョン３から、外部スケジューラが使えるように
	  変更されたため、NuSystemとmusを切り放し、musライブラリの
	  関数がそのまま使えるようにしました。
	  なお、musライブラリバージョン３以外のライブラリは使えなくなります。

	・シーケンスプレイヤの複数化
	  musライブラリバージョン３から、シーケンス（song）が
	  複数再生できるようになりました。そのため、nualsgiライブラリと
	  同じようにシーケンスプレイヤを２つにしました。この関係で
	  シーケンス関係の関数を変更しました。

	・nuAuStlInit(),nuAuStlMgrInit()の型変更
	  nuAuStlInit(),nuAuStlMgrInit()を、使用ヒープサイズを返すように
	  変更しました。

	・musライブラリバージョン３で変更による関数の変更
	  nuAuStlPtrBankInit(),nuAuStlPtrBankSet(), nuAuStlSeqPlayerInit(),
	  nuAuStlSndPlayerDataSet()の追加。
	  nuAuStlSeqPlayerDataSet()をnuAuStlSeqPlayerDataSet()に変更。
	  nuAuStlBankSet(),nuAuStlPlayerInit()の削除。

	・ヒープメモリ関数の追加
	  musの内部関数を利用してヒープメモリの使用サイズと空き容量を
	  取得出来る関数を追加しました。

	・audio,n_audioライブラリのソースの統一
	  これまでaudioマイクロコード用ライブラリとn_audioマイクロコード用
	  ライブラリは分かれていましたが、統一しました。

	・nualsgi_n.hの変更
	  nualsgi_n.hを、N_AUDIOの定義とnualsgi.hのインクルードおよび
	  n_audioマイクロコード用のヘッダのインクルードのみに変更しました。
	

	◯グラフィックスの変更

	・nuGfxDisplay変数の変更
	  nuGfxDisplay変数は、これまでnuGfxDisplayOn()内でNU_GFX_DISPLAY_ON
	  にした場合は、nuGfxTaskMgr()内で毎フレームosViBlack(FALSE)として
	  画面の表示をオンにしていましたが、NU_GFX_DISPLAY_ON_TORIGGERフラグ
	  を立てるように変更し、osViBlack(FALSE)を呼び出した後は
	  NU_GFX_DISPLAY_ONをnuGfxDisplayに格納するというように変更しました。
	  これにより、osViBlack(FALSE)の呼出しをnuGfxDisplayOn()の後に１回だけ
	  おこなうようになります。

	・nuGfxSetCfb()の変更
	  スケジューラが１フレームバッファに対応したため、nuGfxSetCfb()で
	  フレームバッファ数をスケジューラに登録するように変更。
	  また、登録するフレームバッファのポインタ配列をチェックし、
	  全て同じアドレスであれば、フレームバッファ数を１とするように
	  しています。

	・XBUSマイクロコード、自己ロードの対応
	  XBUSマイクロコードに対応しました。実際にはスケジューラの関係で
	  今までのNuSystemでもXBUSマイクロコードは使用可能でした。
	  しかし、内部でOSTask構造体のflagsに必要な値を指定できなかった
	  ので、特殊なことや自己ロードもできませんでした。
	  そこで、nuGfxTaskStart()のflagにつぎの値を追加しました。
	  以下の値は論理和を用いて同時に指定できます。

		NU_SC_NORDP		RDPを用いないかRDPからのメッセー
					ジ待ちをおこなわない。通常RSP	
					のみのマイクロコードの時に指定	
		NU_SC_UCODE_XBUS	XBUSマイクロコードの時に指定
		NU_SC_TASK_YIELDED	OS_TASK_YIELDED相当		
		NU_SC_TASK_DP_WAIT	OS_TASK_DP_WAIT相当		
		NU_SC_TASK_LODABLE	OS_TASK_LOADABLE相当		
					UCODEの自己ロード機能を使う場合
					に指定			
		NU_SC_TASK_SP_ONLY	OS_TASK_SP_ONLY相当
	  
	◯PIマネージャ

	・nuPiReadRom()
	  カートリッジからPI-DMA転送時にブロック単位で転送するように
	  変更しました。ブロックのサイズは16384Byteです。
	  これは、一度に大きなサイズをPI-DMA転送した場合、オーディオ
	  データのPI-DMA転送ができないくなり、オーディオにノイズが発生
	  するのを防ぐためです。


	◯SIマネージャ

	・内部処理の変更
	  これまで、SIマネージャに登録する各スレッド内で、送られてきた
	  メッセージを各デバイス用のマネージャを呼び出して、switch文
	  で比較をおこなうような処理にしていました。しかし、SIに接続される
	  デバイスの種類が増え処理が重くなる可能性がでてきました。
	  そこで、各デバイスマネージャにメジャー番号を付け、
	  デバイスマネージャ単位で関数ポインタのテーブルをSIマネージャに
	  登録するように変更しました。デバイスマネージャへのメッセージは
	  メジャー番号＋マイナー番号としてSIマネージャに送ります。
	  SIマネージャは、メジャー番号に対応した関数ポインタのテーブルの
	  マイナー番号に対応する関数を呼び出します。このように大幅に
	  比較処理が減るため、SIマネージャの処理が軽くなりました。
	  ただい、上記のように大幅に処理の流れが変更されていますので、
	  SIデバイスを変更している方は注意が必要です。

	・SIマネージャへの登録関数の変更
	  内部処理の変更に伴い、SIマネージャへの登録関数nuSiCallBackAdd()
	  nuSiCallBackRemove()を変更しました。nuSiCallBackAdd()は引数が
	  減っていますので注意してください。

	・SIマネージャにメッセージを送る関数の追加
	  SIマネージャの変更にともない、SIマネージャに送るメッセージの
	  フォーマットを統一し、専用の関数、nuSiSendMesg()（同期型）
	  または、nuSiSendMesgNW()（非同期型）を用いるように変更しました。
	  これらの関数は、引数にメッセージの番号と送るデータや受け取る
	  データ位置をしめすポインタを指定します。SIマネージャを
	  カスタマイズする場合は、これらの関数を用いてSIマネージャに
	  メッセージを送るようにしてください。

	・SIマネージャの停止／再実行関数の追加
	  SIマネージャのスレッドを停止状態にする関数nuSiMgrStop()と、再度
	  実行可能状態にするnuSiMgrRestart()を追加しました。nuSiMgrStop()で
	  SIマネージャを停止状態にしている間は、ユーザのアプリケーションが
	  SIイベントに関連付けされているnuSiMesgQを使用することができます。
	  また、SIマネージャを停止している間はリトレースメッセージは受けない
	  ようにしています。

	・nuContPakOpen()の変更
	  内部でosPfsInitPak()でコントローラパックが差し込まれているか
	  調べ、そうでない場合振動パックのチェックをおこなっていたのですが、
	  その後のOSの変更により、差し込まれているコントローラパックの
	  ID領域が壊れていた場合、nuContPakRepairId()が正常に処理でき
	  なくなっていたのを修正しました。この修正により、nuContPakOpen()で
	  振動パックのチェックは行わないように変更しました。

	・nuContRmbStop()の追加
	  振動パックの振動を止める関数、nuContRmbStop()を追加しました。

	・音声認識システムの対応
	  音声認識システムに対応し、音声認識マネージャを追加しました。


	◯デバッグコンソール
	・反転文字対応
	  デバックコンソールの文字アトリビュートに反転文字を追加しました。
	  アトリビュートにNU_DEB_CON_ATTR_REVERSEを指定してください。


Version 1.20
	64GBパック対応
		64GBパックマネージャと制御関数を追加。

	振動パックマネージャの不具合の修正
		振動パックマネージャで、PRE NMI時に
		ハングアップするバグを修正。

	デバッグコンソールの文字フォントの改良
		デバッグ文字のフォントを変更した。
		また、カバレッジの関係で文字がつぶれていたのを、
		つぶれないように表示方法を改良した。

	デバッグコンソールの文字出力関数の追加
		未完成ながら、nuDebConPrintf()を追加。浮動小数点の表示が
		未対応。

	コントローラパック関数の変更
		コントローラパック関数を、エラーを返すように変更。

	F3DEX2対応
		F3DEX2用のグラフィックス初期化関数nuGfxInitEX2()を追加。
		デバッグコンソールとパフォーマンスメータにnuDebConDispEX2(),
		nuDebTaskPerfBar0EX2(),nuDebTaskPerfBar1EX2()を追加。
		また、F3DEX_GBI_2が定義されている場合、自動的に
		デバッグコンソール、パフォーマンスメータ共にF3DEX2用の関数を
		使うようにヘッダファイルを変更した。

	PI関数のSRAM対応
		nuPiInitSram,nuPiReadWritSram関数を追加
	
	

Version 1.11
	nuDebConWindowShow関数のコンパイル忘れの修正
		nuDebConWindowShow関数をMakefileに入れ忘れたのを修正
	

Version 1.10
	EPI対応
	Z-Sortマイクロコード対応
		nusys.h
			NU_SC_NORDPを追加
		nusched.c
		+	nuScExecuteGraphics関数をNU_SC_NORDPの場合
			RDPの終了待ちをしないように変更
		+	NU_SC_NORDPの場合、RDPの終了時間を計測しないよう
			変更
		nugfxtaskmgr.c
		+	nuGfxTaskMgr関数でnuGfxSwapCfbFuncの引数を
			framebufferからNuScTask構造体に変更
			nuGfxTaskEndFuncの引数をNuScTask構造体に変更
		nugfxswapcfb.c
		+	nuGfxSwapCfbFunc関数の引数が変更されたため、
			gfxTask構造体からframebufferのアドレスを取得する
			ように変更

	コントローラマネージャの変更
		SIマネージャであったコントローラマネージャを
		SIマネージャとコントローラマネージャに分離。
		コントローラマネージャもコントローラパックマネージャや
		振動パックマネージャと同様、SIマネージャから
		コールバックされるようになった。

	nuDebConClear関数の変更
		nuDebConClear関数をコールしても、テキスト表示は
		原点に戻らなかったのを、戻すように変更

	EEPROM対応
		EEPROMマネージャの追加

	デバッグコンソールのハイレゾ対応

	パフォーマンスメータのハイレゾ対応

	パフォーマンスメータの改良
		パフォーマンスメータnuDebTaskPerf1()に
		RDPの内部カウンタのバーを追加

	nuContPakFileReSize,nuContPakFileReSizeJisを削除

	振動パックマネージャの不具合の修正

	nuContDataGet,nuContDataGetAllをマクロから関数に変更

	nuContDataGet,nuContDataGetAll,nuContDataGetEx,nuContDataGetExAll関数
	のコントローラデータのコピー部分をセマフォで排他制御にした

	
	
			
