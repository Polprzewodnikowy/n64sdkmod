<!DOCTYPE HTML PUBLIC "-//IBM//DTD HPB HTML//EN">
<HTML>
<HEAD>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../N64man.css">
<Editor's Notes: JLR made reformating and copy edits.>
<TITLE>gSPObjRenderMode</TITLE>
</HEAD>

<BODY bgcolor="#ffffff">

<H1>gSPObjRenderMode<FONT size="+0"> [Macro]</FONT></H1>

<p><b>Function</b></font></p>

<p>gSPObjRenderMode</p>
<P>
<i>Changes the object rendering mode in the RSP</i>
</P>
<p><b>Syntax</b></font></p>
<p>
<PRE><CODE>#include &lt;ultra64.h&gt;        /* <A HREF="../../header/gs2dex.htm">gs2dex.h</A> */
gSPObjRenderMode(Gfx *gdl, u32 mode)
gsSPObjRenderMode(         u32 mode)</CODE></PRE></p>

<p><b>Arguments</b></font></p>
<p>
<DL>
  <DT><B>gdl</B>
  <DD>the pointer to the display list. 
  <DT><B>mode</B>
  <DD>the object rendering mode: 
  <DD><B>G_OBJRM_NOTXCLAMP</B> (Do not perform clamping) 
  <DD><B>G_OBJRM_BILERP</B> (Correct when bilinear interpolation is performed) 
  <DD><B>G_OBJRM_SHRINKSIZE_1</B> (Trim 0.5 texel off drawn image) 
  <DD><B>G_OBJRM_SHRINKSIZE_2</B> (Trim 1.0 texel off drawn image) 
  <DD><B>G_OBJRM_WIDEN</B> (Enlarge drawn image by 3/8 texel) 
</DL></p>
<p><b>Description</b></font></p>
<P>
Changes the object rendering mode in the RSP. Normally, the object rendering mode is set according to the screen mode. The RDP has various rendering modes for drawing sprites or backgrounds (BG). For information about these object rendering modes, refer to the "4.4 Object render mode settings" in the Readme file of the latest version of the S2DEX microcode. 
</P>
<P>
Multiple modes can be specified for <B>mode</B> with a bit sum of the following flags. However, note that G_OBJRM_SHRINKSIZE_1 and G_OBJRM_SHRINKSIZE2 cannot be specified at the same time.
<DL>
  <DT><B>G_OBJRM_NOTXCLAMP</B>
    <DL>
      <DT>Specifies that no clamping be performed in the RSP. When a texture is fixed to a sprite, the following relationships hold for the texture size (<B>imageW</B>, <B>imageH</B>), scale values (<B>scaleW</B>, <B>scaleH</B>) and sprite size (<B>objW</B>, <B>objH</B>) 

      <DD> 
      <DD>objW = imageW / scaleW;
      <DD>objH = imageH / scaleH;
      <DD> 
      <DT>When the texture is fixed to the sprite, the region of the texture from texture coordinates (0, 0) to (<B>imageW</B>-1, <B>imageH</B>-1) is drawn on the sprite. However, due to calculation errors, a little texture outside of this range may be displayed at the periphery of the sprite. To prevent this, the RSP performs clamping outside of the range where the texture is to be drawn. For information about clamping, see Section 13 "Texture Mapping" in the N64 Programming Manual. 
    </DL>
</DL>
<DL>
  <DT><B>G_OBJRM_BILERP</B>
  <DD>Corrects for the 0.5 slippage of the texture that occurs when bilinear interpolation is performed. When clamping is turned on, the RSP uses the bilinear interpolation feature and supports subpixel-unit movements of the internal images. This enables a sprite to be moved in 1/4-pixel units. 
</DL>
<DL>
  <DT><B>G_OBJRM_SHRINKSIZE_1</B>
  <DD>Draws texture image for which the perimeter has been pared down by 0.5 texel. When a number of bilinearly interpolated sprites are to be aligned and handled as one large bilinearly interpolated sprite, the continuity of the image at the boundaries becomes a problem. To ensure image continuity, you must overlap the textures of the individual sprites by one line each. This makes the 0.5 texel at the periphery (the <FONT COLOR="#00FFFF">colored</FONT> portion in the figure below) unnecessary because the neighboring sprite takes care of this part. Although each texture image is reduced in size by 0.5 texel, the upper-left screen coordinate does not change, and the drawing result will be as shown in the figure below. 
</DL>
<IMG SRC="gSPObjRenderMode00.gif">
<DL>
  <DT><B>G_OBJRM_SHRINKSIZE_2</B>
  <DD>This mode works the same as G_OBJRM_SHRINKSIZE_1, but doubles the scale of image reduction (pares 1 texel around the periphery). It is used when the texels of adjacent sprites are overlapped by two lines each to maintain continuity when subpixel processing is performed. 
</DL>
<DL>
  <DT><B>G_OBJRM_WIDEN</B>
  <DD>Enlarges the drawn image by 3/8 pixel in the positive S and T directions. This mode is used to prevent blank space from opening up at the seams when a large rotating object is displayed from texture memory (TMEM) by combining sprites. This mode is effective when combining and drawing opaque sprites. It is unnecessary for translucent sprites because the seams are filled by processing by the blender (BL). 
</DL>
</P>
<p><b>Note</b></font></p>
<P>
When drawing sprites, use the following RDP rendering modes:
<DL>
  <DT>* When antialiasing is off: 
  <DT>&lt;Opaque sprites&gt;
  <DD>G_RM_SPRITE
  <DD>G_RM_SPRITE2
  <DT>&lt;Translucent&gt;
  <DD>G_RM_XLU_SPRITE
  <DD>G_RM_XLU_SPRITE2
</DL>
<DL>
  <DT>* When antialiasing is on: 
  <DT>&lt;Opaque sprites&gt;
  <DD>G_RM_AA_SPRITE/G_RM_RA_SPRITE
  <DD>G_RM_AA_SPRITE2/G_RM_RA_SPRITE2
  <DT>&lt;Translucent&gt;
  <DD>G_RM_AA_XLU_SPRITE
  <DD>G_RM_AA_XLU_SPRITE2
</DL>
</P>
<P>
When two sprites overlap, the edge of the bottom sprite may affect the edge of the top sprite. Since this cannot be avoided, use G_RM_XLU_SPRITE if this bothers you. 
</P>
<p><b>See Also</b></font></p>
<P>
<A HREF="../gdp/gDPSetRenderMode.htm">gDPSetRenderMode</A>
</P>
<p><b>Revision History</b></font></p>
<P>
02/01/99  Entirely revised.
</P>
</BODY>
</HTML>
