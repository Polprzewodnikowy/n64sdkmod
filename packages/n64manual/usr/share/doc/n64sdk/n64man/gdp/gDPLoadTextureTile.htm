<!DOCTYPE HTML PUBLIC "-//IBM//DTD HPB HTML//EN">
<HTML>
<HEAD>
<link rel=stylesheet type="text/css" HREF="../N64man.css">
<!--
Editors Notes:
  JLR made reformating and copy edits.
  PWC- updated formatting
-->

<TITLE>gDPLoadTextureTile</TITLE>
</HEAD>

<BODY bgcolor="#ffffff">

<H1>gDPLoadTextureTile [Macro]</H1>
<h2>Function</h2>
<P>gDPLoadTextureTile<br>
<br><i>Loads part of a texture image</i></P>

<p><b>Syntax</b></p>

<p><PRE><CODE>#include &lt;ultra64.h&gt;        /* <A href="../../header/gbi.htm">gbi.h</A> */
gDPLoadTextureTile(
        Gfx *gdl,
        u32 timg, 
        u32 fmt, 
        u32 siz, 
        u32 width,
        u32 height, 
        u32 uls,
        u32 ult,
        u32 lrs,
        u32 lrt, 
        u32 pal, 
        u32 cms,
        u32 cmt, 
        u32 masks,
        u32 maskt, 
        u32 shifts,
        u32 shiftt )
gsDPLoadTextureTile(
        u32 timg, 
        u32 fmt, 
        u32 siz, 
        u32 width,
        u32 height, 
        u32 uls,
        u32 ult,
        u32 lrs,
        u32 lrt, 
        u32 pal, 
        u32 cms,
        u32 cmt, 
        u32 masks,
        u32 maskt, 
        u32 shifts,
        u32 shiftt )</CODE></PRE></p>

<p><b>Arguments</b></p>
<p>
<DL>
  <DT><B>gdl</B>
  <DD>Display list pointer
  <DD>&nbsp;
  <DT><B>timg</B>
  <DD>Address of the texture image (64-bit alignment)
  <DD>&nbsp;
  <DT><B>fmt</B>
  <DD>Texture image format
  <DD><B>G_IM_FMT_RGBA</B> (RGBA format)
  <DD><B>G_IM_FMT_YUV</B> (YUV format)
  <DD><B>G_IM_FMT_CI</B> (CI format)
  <DD><B>G_IM_FMT_IA</B> (IA format)
  <DD><B>G_IM_FMT_I</B> (I format)
  <DD>&nbsp;
  <DT><B>siz</B>
  <DD>Pixel component size
  <DD><B>G_IM_SIZ_8b</B> (8 bits/texel)
  <DD><B>G_IM_SIZ_16b</B> (16 bits/texel)
  <DD><B>G_IM_SIZ_32b</B> (32 bits/texel)
  <DD>&nbsp;
  <DT><B>width</B>
  <DD>Overall width of texture image  (1~4096)
  <DD>&nbsp;
  <DT><B>height</B>
  <DD>Overall height of texture image (1~4096) 
  <DD>&nbsp;
  <DT><B>uls</B>
  <DD>Texture tile's upper-left s coordinate (10.2, 0.0~1023.75) 
  <DD>&nbsp;
  <DT><B>ult</B>
  <DD>Texture tile's upper-left t coordinate (10.2, 0.0~1023.75) 
  <DD>&nbsp;
  <DT><B>lrs</B>
  <DD>Texture tile's lower right s coordinate (10.2, 0.0~1023.75) 
  <DD>&nbsp;
  <DT><B>lrt</B>
  <DD>Texture tile's lower-right t coordinate (10.2, 0.0~1023.75) 
  <DD>&nbsp;
  <DT><B>pal</B>
  <DD>Location of palette for 4-bit color index texture (4-bit precision, 0~15)
  <DD>* Disabled in this macro. 
  <DD>&nbsp;
  <DT><B>cms</B>
  <DD>s-axis mirror, no-mirror, wrap and clamp flags 
  <DD><B>G_TX_MIRROR</B> (enable mirror operations) 
  <DD><B>G_TX_NOMIRROR</B> (disable mirror operations) 
  <DD><B>G_TX_WRAP</B> (enable wrap operations) 
  <DD><B>G_TX_CLAMP</B> (enable clamp operations) 
  <DD>&nbsp;
  <DT><B>cmt</B>
  <DD>t-axis mirror, no-mirror, wrap and clamp flags
  <DD><B>G_TX_MIRROR</B> (enable mirror operations) 
  <DD><B>G_TX_NOMIRROR</B> (disable mirror operations) 
  <DD><B>G_TX_WRAP</B> (enable wrap operations) 
  <DD><B>G_TX_CLAMP</B> (enable clamp operations) 
  <DD>&nbsp;
  <DT><B>masks</B>
  <DD>s-axis mask (4-bit precision, 0~15) 
  <DD><B>G_TX_NOMASK</B> (do not mask, 0) 
  <DD><B>numeric value n</B> (mask, 1~15) 
  <DD>&nbsp;
  <DT><B>maskt</B>
  <DD>t-axis mask (4-bit precision, 0~15) 
  <DD><B>G_TX_NOMASK</B> (do not mask, 0) 
  <DD><B>numeric value n</B> (mask, 1~15) 
  <DD>&nbsp;
  <DT><B>shifts</B>
  <DD>s-coordinate shift value (4-bit precision, 0~15) 
  <DD><B>G_TX_NOLOD</B> (do not shift, 0) 
  <DD><B>numeric value n</B> (shift, 1~15) 
  <DD>&nbsp;
  <DT><B>shiftt</B>
  <DD>t-coordinate shift value (4-bit precision, 0~15) 
  <DD><B>G_TX_NOLOD</B> (do not shift, 0)
  <DD><B>numeric value n</B> (shift, 1~15) 
</DL>
</p>
<p><b>Description</b></p>
<P>
Loads part of a texture from DRAM into texture memory (TMEM). This macro can be used to cut out an arbitrary square region from a large texture in DRAM and load that region into TMEM. </P>
<P>
This macro is actually comprised of a number of 64-bit GBI commands. Thus, if you need to find out the exact size of the display list, you need to consider how many GBI commands it is comprised of. 
<DL></p>
<p><DT>Regarding the <B>fmt</B> argument</p>
<p><DL>
  <DT><B>G_IM_FMT_RGBA</B>
  <DD>Each texel comprises four elements of information: RGB (red, green, blue) and alpha (opacity). 
  <DT><B>G_IM_FMT_YUV</B>
  <DD>Each texel comprises a Y (intensity) component and a UV (color difference) component. 
  <DT><B>G_IM_FMT_CI</B>
  <DD>Each texel is comprised of index information specifying palette data. 
  <DT><B>G_IM_FMT_IA</B>
  <DD>Each texel is comprised of I (intensity) information and alpha information. 
  <DT><B>G_IM_FMT_I</B>
  <DD>Each texel is a texture with only I information. Since this is extremely compact, it is useful when only a few colors are being used. 
  <DT>&nbsp;
  <DT>You can choose from among 7 different texture image formats. The table shows the valid combinations of format and size. Select the format that best suits the texture compression method and type. 
  <DT>&nbsp;
  <DT>
<TABLE border="1" cellspacing="0" cellpadding="3">
  <TR>
    <TD rowspan="2" colspan="2">&nbsp;</TD>
    <TD nowrap colspan="3" align="center" valign="middle"><B>G_IM_SIZ_</B>(Size)</TD></TR>
  <TR>
    <TD nowrap align="center" valign="middle"><B>8b</B></TD>
    <TD nowrap align="center" valign="middle"><B>16b</B></TD>
    <TD nowrap align="center" valign="middle"><B>32b</B></TD></TR>
  <TR>
    <TD nowrap rowspan="5" align="center" valign="middle"><B>G_IM_FMT_<BR>
</B>(Format)</TD>
    <TD nowrap align="center" valign="middle"><B>RGBA</B></TD>
    <TD nowrap align="center" valign="middle">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
    <TD nowrap align="center" valign="middle">X<BR>
(5/5/5/1)</TD>
    <TD nowrap align="center" valign="middle">X<BR>
(8/8/8/8)</TD></TR>
  <TR>
    <TD nowrap align="center" valign="middle"><B>YUV</B></TD>
    <TD nowrap align="center" valign="middle">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
    <TD nowrap align="center" valign="middle">X</TD>
    <TD nowrap align="center" valign="middle">&nbsp;<BR>
&nbsp;</TD></TR>
  <TR>
    <TD nowrap align="center" valign="middle"><B>CI</B></TD>
    <TD nowrap align="center" valign="middle">X</TD>
    <TD nowrap align="center" valign="middle">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
    <TD nowrap align="center" valign="middle">&nbsp;<BR>
&nbsp;</TD></TR>
  <TR>
    <TD nowrap align="center" valign="middle"><B>IA</B></TD>
    <TD nowrap align="center" valign="middle">X<BR>
(4/4)</TD>
    <TD nowrap align="center" valign="middle">X<BR>
(8/8)</TD>
    <TD nowrap align="center" valign="middle">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD></TR>
  <TR>
    <TD nowrap align="center" valign="middle"><B>I</B></TD>
    <TD nowrap align="center" valign="middle">X</TD>
    <TD nowrap align="center" valign="middle">&nbsp;</TD>
    <TD nowrap align="center" valign="middle">&nbsp;<BR>
&nbsp;</TD></TR>
</TABLE>
  </DL></p>
  <DT>&nbsp;
<p><DT>Regarding the <B>cms</B> and <B>cmt</B> arguments</p>
<p><DD>Multiple specifications can be made with a bit sum of the following flags: 
  <DL>
  <DT><B>G_TX_MIRROR</B>
  <DD>Enables mirroring. Mirror textures can be used for textures with axial symmetry, like a tree. Symmetric textures are an effective way to reduce texture volume. 
  <DT><B>G_TX_NOMIRROR</B>
  <DD>Disables mirroring. 
  <DT><B>G_TX_WRAP</B>
  <DD>Enables wrapping. A wrapped texture repeats a texel. The wrapping cycle can be specified by a mask. 
  <DT><B>G_TX_CLAMP</B>
  <DD>Enables clamping. A clamped texture repeats the edge texel color when sampling outside of the texture map. Clamping is performed at the boundary of the texture tile. 
  </DL></p>
  <DT>&nbsp;
<p><DT>Regarding the <B>masks</B> and <B>maskt</B> arguments</p>
<p><DL>
  <DT><B>G_TX_NOMASK</B>(0)
  <DD>No mask is used. 
  <DT><B>numeric value n</B> (1~15) 
  <DD>Specifies the wrap position with the value of n. The low-order n bits of the s,t texel coordinates are used for texture sampling. 
  <DT>&nbsp;
  <DT>Texture sampling utilizes the low-order n bits of the s,t texture coordinates. You would set to 5 to wrap a texture with a boundary of 32x32 (2<SUP>5</SUP>x<SUP>5</SUP>). Set to 0 to perform clamping. 
  </DL></p>
  <DT>&nbsp;
<p><DT>Regarding the <B>shifts</B> and <B>shiftt</B> arguments</p>
<p><DL>
  <DT><B>G_TX_NOLOD</B>(0)
  <DD>No shifting is performed.
  <DT><B>numeric value n</B> (1~15) 
  <DD>Shifts the s,t texel coordinate by n bits. This enables the sampling of low-level LOD maps and detail textures. 
  <DT>&nbsp;
  <DT>Normally, use G_TX_NOLOD. Also, if numeric value n is used, see <A HREF="gDPSetTile.htm">gDPSetTile</A> for more information.
  </DL>
</DL></p>

<P>The values specified by <B>shifts</B> and <B>shiftt</B> (the shift parameter values) represent the amount by which the s,t coordinates are shifted to the left or to the right.  This is used for the MIP-mapping, detail, and sharp mode settings.  The values 0~10 are interpreted as right shifts, and the values 11~15 are interpreted as left shifts (see the table below).  The value 11 corresponds to (&lt;&lt;5), 12 corresponds to (&lt;&lt;4), ..., and 15 corresponds to (&lt;&lt;1), and shift parameter value 0 is for tile 1, value 1 is for tile 2, value 2 is for tile 4, and so on.</p>

<P>
<TABLE border="1" cellspacing="0" cellpadding="3">
  <TR>
    <TD nowrap align="center" valign="middle" width="150"><font face="arial" size="-1">Shift parameter value</TD>
    <TD nowrap align="center" valign="middle" width="150"><font face="arial" size="-1">Shift amount</TD></TR>
  <TR>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">0</TD>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">No shift</TD></TR>
  <TR>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1"><font face="arial" size="-1">1</TD>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">&gt;&gt; 1</TD></TR>
  <TR>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">2</TD>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">&gt;&gt; 2</TD></TR>
  <TR>
    <TD nowrap colspan="2" align="center" valign="middle"><font face="arial" size="-1">...</TD></TR>
  <TR>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">9</TD>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">&gt;&gt; 9</TD></TR>
  <TR>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">10</TD>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">&gt;&gt; 10</TD></TR>
  <TR>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">11</TD>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">&lt;&lt; 5</TD></TR>
  <TR>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">12</TD>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">&lt;&lt; 4</TD></TR>
  <TR>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">13</TD>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">&lt;&lt; 3</TD></TR>
  <TR>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">14</TD>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">&lt;&lt; 2</TD></TR>
  <TR>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">15</TD>
    <TD nowrap align="center" valign="middle"><font face="arial" size="-1">&lt;&lt; 1</TD></TR>
</TABLE>
</p>

<P>For example, consider a single detail level (32x16).  For the six levels of a MIP map pyramid (32x32, 16x16, 8x8, 4x4, 2x2, and 1x1), assume that the tile descriptor indicating each level have been loaded into TMEM (tile descriptor 1 indicates 32x32, tile descriptor 2  indicates 16x16, ..., and tile descriptor 6 indicates 1x1).  When detail mode is enabled by <A HREF="gDPSetTextureDetail.htm">gDPSetTextureDetail</A>, tile descriptor 0 (primitive tile=0) specifies the 32x16 detail level by a 15 (&lt;&lt;1) shift along the s,t axis.  This maps a 2x2 detail texel to a single base texel according to the magnification rate.  For details, see <A HREF="../../pro-man/pro13/13-07.htm#05-01">Section 13.7.5.1 "Detail Texture,"</a> in the N64 Programming Manual.
</p>

<p>
For details about each argument, see Section 13.4 "Tile Attributes" in the N64 Programming Manual. Also, for information about using this macro, see Section 13.5 "Tile Descriptor Loading." 
</P>
<p><b>Note</b></p>
<P>
To load part of a 4-bit texture, use the <A href="gDPLoadTextureTile_4b.htm">gDPLoadTextureTile_4b</A> macro, no matter what the type. 
</P>
<P>
Also, note that operation is not currently guaranteed for G_IM_FMT_YUV (YUV format).
</P>
<p><b>See Also</b></p>
<P>
<A href="gDPLoadTextureBlock.htm">gDPLoadTextureBlock</A>, <A href="gDPLoadTextureBlock_4b.htm">gDPLoadTextureBlock_4b</A>, 
<A href="gDPLoadTextureTile_4b.htm">gDPLoadTextureTile_4b</A>, <A href="gDPLoadTLUT_pal16.htm">gDPLoadTLUT_pal16</A>, 
<A href="gDPLoadTLUT_pal256.htm">gDPLoadTLUT_pal256</A>, <A href="../gu/guLoadTextureBlockMipMap.htm">guLoadTextureBlockMipMap</A>, <A href="../tool/rgb2c.htm">rgb2c</A>
</P>

<p><b>Revision History</b></p>
<P>
02/01/99 Completely rewritten.<br>
03/31/99 Modified the Description.
</P>

</BODY>
</HTML>
