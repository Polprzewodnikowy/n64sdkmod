
<html>
<head>
<link REL=STYLESHEET TYPE="text/css" HREF="../N64man.css">
<Editor's Notes: JLR made reformating and copy edits
MAP- added revisions>
</head>
<body bgcolor="#FFFFFF">

<h1>
Index for os Functions</h1>

<table BORDER=0 CELLSPACING=3>
<tr>
<td><b><font size=-2><font color="#FF0000">Jump!</font> &gt;&gt;</font></b></td>

<td><b><font size=-1>[<a href="#osAi">osAi</a>] [<a href="#osCont">osCont</a>]
[<a href="#osEeprom">osEeprom</a>] [<a href="#osEpi">osEpi</a>] [<a href="#osFlash">osFlash</a>]
[<a href="#osGbpak">osGbpak</a>] [<a href="#osGet">osGet</a>]</font></b>
<br><b><font size=-1>[<a href="#osMotor">osMotor</a>] [<a href="#osPfs">osPfs</a>]
[<a href="#osPi">osPi</a>] [<a href="#osSet">osSet</a>] [<a href="#osVi">osVi</a>][<a href="#osVoice">osVoice</a>][<a href="#deleted">Functions
removed</a>]</font></b></td>
</tr>
</table>
<p>
<table border=1 cellpadding=3>
<tr>
<td WIDTH="210"><b><a href="OS_CYCLES_TO_NSEC.htm">OS_CYCLES_TO_NSEC</a></b></td>

<td WIDTH="500"><font size=-1>Converts from CPU Count register cycles to
nanoseconds.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="OS_CYCLES_TO_USEC.htm">OS_CYCLES_TO_USEC</a></b></td>

<td WIDTH="500"><font size=-1>Converts from CPU Count register cycles to
microseconds.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="OS_DCACHE_ROUNDUP_ADDR.htm">OS_DCACHE_ROUNDUP_ADDR</a></b></td>

<td WIDTH="500"><font size=-1>Rounds up the address value to the physical
address, to match the data cache line size.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="OS_DCACHE_ROUNDUP_SIZE.htm">OS_DCACHE_ROUNDUP_SIZE</a></b></td>

<td WIDTH="500"><font size=-1>Rounds up the address value to the size value,
to match the data cache line size.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="OS_K0_TO_PHYSICAL.htm">OS_K0_TO_PHYSICAL</a></b></td>

<td WIDTH="500"><font size=-1>Translates from a cached, direct-mapped CPU
address (KSEG0) to a physical address.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="OS_K1_TO_PHYSICAL.htm">OS_K1_TO_PHYSICAL</a></b></td>

<td WIDTH="500"><font size=-1>Converts from the CPU virtual address KSEG1
(cache disabled, no TLB mapping) to the physical address.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="OS_NSEC_TO_CYCLES.htm">OS_NSEC_TO_CYCLES</a></b></td>

<td WIDTH="500"><font size=-1>Converts from nanoseconds to CPU Count register
cycles.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="OS_PHYSICAL_TO_K0.htm">OS_PHYSICAL_TO_K0</a></b></td>

<td WIDTH="500"><font size=-1>Converts from the physical address to a direct
mapped CPU virtual address with cache enabled.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="OS_PHYSICAL_TO_K1.htm">OS_PHYSICAL_TO_K1</a></b></td>

<td WIDTH="500"><font size=-1>Translates from a physical address to an
uncached, direct-mapped CPU address.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="OS_USEC_TO_CYCLES.htm">OS_USEC_TO_CYCLES</a></b></td>

<td WIDTH="500"><font size=-1>Converts from microseconds to CPU Count register
cycles.</font></td>
</tr>

<tr>
<td><b><a href="osAfterPreNMI.htm">osAfterPreNMI</a></b></td>

<td><font size=-1>Initializes the RSP's program counter (PC).</font></td>
</tr>

<tr>
<td WIDTH="210"><a NAME="osAi" href="osAiGetLength.htm"></a><a NAME="osAi" href="osAiGetLength.htm"></a><a NAME="osAi" href="osAiGetLength.htm"></a><b><a href="osAiGetLength.htm" name="osAi">osAiGetLength</a></b></td>

<td WIDTH="500"><font size=-1>Returns the number of bytes remaining in
the current DMA buffer.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osAiGetStatus.htm">osAiGetStatus</a></b></td>

<td WIDTH="500"><font size=-1>Returns the hardware status of the audio
interface.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osAiSetFrequency.htm">osAiSetFrequency</a></b></td>

<td WIDTH="500"><font size=-1>Calculates the correct values for the internal
divisors and returns the actual frequency.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osAiSetNextBuffer.htm">osAiSetNextBuffer</a></b></td>

<td WIDTH="500"><font size=-1>Sets up the next DMA transfer from RDRAM
to the AI buffer.</font></td>
</tr>

<tr>
<td><b><a href="osAppNMIBuffer.htm">osAppNMIBuffer</a></b></td>

<td><font size=-1>64-byte buffer cleared by a cold
reset.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osCartRomInit.htm">osCartRomInit</a></b></td>

<td WIDTH="500"><font size=-1>Returns information regarding the hardware
settings necessary when using a cartridge.</font></td>
</tr>

<tr>
<td WIDTH="210"><a NAME="osCont" href="osContGetQuery.htm"></a><a NAME="osCont" href="osContGetQuery.htm"></a><a NAME="osCont" href="osContGetQuery.htm"></a><b><a href="osContGetQuery.htm" name="osCont">osContGetQuery</a></b></td>

<td WIDTH="500"><font size=-1>Returns Controller's status and type.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osContGetReadData.htm">osContGetReadData</a></b></td>

<td WIDTH="500"><font size=-1>Returns the status of the 3D control stick
and buttons to the pad in OSContPad structure.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osContInit.htm">osContInit</a></b></td>

<td WIDTH="500"><font size=-1>Initializes the game Controller.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osContReset.htm">osContReset</a></b></td>

<td WIDTH="500"><font size=-1>Resets all game Controllers.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osContSetCh.htm">osContSetCh</a></b></td>

<td WIDTH="500"><font size=-1>Specifies the number of controllers that
will be read into the system.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osContStartQuery.htm">osContStartQuery</a></b></td>

<td WIDTH="500"><font size=-1>Issues a query command to SI device.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osContStartReadData.htm">osContStartReadData</a></b></td>

<td WIDTH="500"><font size=-1>Generates a read command to get the status
of the controllers.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osCreateLog.htm">osCreateLog</a></b></td>

<td WIDTH="500"><font size=-1>Initializes the OSLog data structure.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osCreateMesgQueue.htm">osCreateMesgQueue</a></b></td>

<td WIDTH="500"><font size=-1>Initializes a given OSMesgQueue structured
message queue to an empty state.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osCreatePiManager.htm">osCreatePiManager</a></b></td>

<td WIDTH="500"><font size=-1>Creates and starts the PI Manager system
thread to provide mutual exclusion and synchronization support for the
PI devices.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osCreateRegion.htm">osCreateRegion</a></b></td>

<td WIDTH="500"><font size=-1>Creates a region from the contiguous memory
area starting from the address in startAddress and continuing for the number
of bytes in length.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osCreateScheduler.htm">osCreateScheduler</a></b></td>

<td WIDTH="500"><font size=-1>Creates an RCP task scheduler.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osCreateThread.htm">osCreateThread</a></b></td>

<td WIDTH="500"><font size=-1>Registers a schedulable object.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osCreateViManager.htm">osCreateViManager</a></b></td>

<td WIDTH="500"><font size=-1>Specifies the VI manager.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osDestroyThread.htm">osDestroyThread</a></b></td>

<td WIDTH="500"><font size=-1>Deletes a schedulable object.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osDpGetCounters.htm">osDpGetCounters</a></b></td>

<td WIDTH="500"><font size=-1>Gets internal performance counters from the
display processor.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osDpGetStatus.htm">osDpGetStatus</a></b></td>

<td WIDTH="500"><font size=-1>Returns the hardware status of the display
processor command status register.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osDpSetNextBuffer.htm">osDpSetNextBuffer</a></b></td>

<td WIDTH="500"><font size=-1>Updates the display processor pointers causing
the display processor to begin reading an RDP display list.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osDpSetStatus.htm">osDpSetStatus</a></b></td>

<td WIDTH="500"><font size=-1>Updates the display processor command status
register with status.</font></td>
</tr>

<tr>
<td WIDTH="210"><a NAME="osEeprom" href="osEepromLongRead.htm"></a><a NAME="osEeprom" href="osEepromLongRead.htm"></a><a NAME="osEeprom" href="osEepromLongRead.htm"></a><b><a href="osEepromLongRead.htm" name="osEeprom">osEepromLongRead</a></b></td>

<td WIDTH="500"><font size=-1>Reads multiple blocks of data from EEPROM.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osEepromLongWrite.htm">osEepromLongWrite</a></b></td>

<td WIDTH="500"><font size=-1>Writes multiple blocks of data to EEPROM.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osEepromProbe.htm">osEepromProbe</a></b></td>

<td WIDTH="500"><font size=-1>Confirms that EEPROM is installed.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osEepromRead.htm">osEepromRead</a></b></td>

<td WIDTH="500"><font size=-1>Reads data from EEPROM.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osEepromWrite.htm">osEepromWrite</a></b></td>

<td WIDTH="500"><font size=-1>Writes data to EEPROM.</font></td>
</tr>

<tr>
<td WIDTH="210"><a NAME="osEpi" href="osEPiGetDeviceType.htm"></a><a NAME="osEpi" href="osEPiGetDeviceType.htm"></a><a NAME="osEpi" href="osEPiGetDeviceType.htm"></a><b><a href="osEPiGetDeviceType.htm" name="osEpi">osEPiGetDeviceType</a></b></td>

<td WIDTH="500"><font size=-1>Accesses EPI on low
level (without using the PI manager).</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osEPiStartDma.htm">osEPiStartDma</a></b></td>

<td WIDTH="500"><font size=-1>Sets up a DMA transfer between RDRAM and
the PI device address space.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osEPiWriteIo.htm">osEPiWriteIo</a></b></td>

<td WIDTH="500"><font size=-1>Expansion parallel
interface (EPI) that uses the PI manager.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osEPiReadIo.htm">osEPiReadIo</a></b></td>

<td WIDTH="500"><font size=-1>Expansion parallel
interface (EPI) that uses the PI manager.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osEPiLinkHandle.htm">osEPiLinkHandle</a></b></td>

<td WIDTH="500"><font size=-1>Sets a pointer to the next member when the
EPI handler is set up.</font></td>
</tr>

<tr>
<td><a NAME="osFlash" href="osFlashInit.htm"></a><a NAME="osFlash" href="osFlashInit.htm"></a><a NAME="osFlash" href="osFlashInit.htm"></a><b><a href="osFlashInit.htm" name="osFlash">osFlashInit</a></b> <img SRC="../../gif/new52.gif" ></td>

<td><font size=-1>Initializes PI handler for Flash.</font></td>
</tr>

<tr>
<td><b><a href="osFlashReadStatus.htm">osFlashReadStatus</a></b> <img SRC="../../gif/new52.gif" ></td>

<td><font size=-1>Obtains the status of Flash.</font></td>
</tr>

<tr>
<td><b><a href="osFlashReadId.htm">osFlashReadId</a></b> <img SRC="../../gif/new52.gif" ></td>

<td><font size=-1>Obtains Flash ID.</font></td>
</tr>

<tr>
<td><b><a href="osFlashClearStatus.htm">osFlashClearStatus</a></b> <img SRC="../../gif/new52.gif" ></td>

<td><font size=-1>Clear the status of Flash.</font></td>
</tr>

<tr>
<td><b><a href="osFlashAllErase.htm">osFlashAllErase</a></b> <img SRC="../../gif/new52.gif" ></td>

<td><font size=-1>Deletes the entire area of Flash.</font></td>
</tr>

<tr>
<td><b><a href="osFlashAllEraseThrough.htm">osFlashAllEraseThrough</a></b> <img SRC="../../gif/new52.gif" ></td>

<td><font size=-1>Deletes the entire area of Flash. (No status check.)</font></td>
</tr>

<tr>
<td><b><a href="osFlashSectorErase.htm">osFlashSectorErase</a></b> <img SRC="../../gif/new52.gif" ></td>

<td><font size=-1>Deletes 1 sector of Flash.</font></td>
</tr>

<tr>
<td><b><a href="osFlashSectorEraseThrough.htm">osFlashSectorEraseThrough</a></b> <img SRC="../../gif/new52.gif" ></td>

<td><font size=-1>Deletes 1 sector of Flash. (No status check.)</font></td>
</tr>

<tr>
<td><b><a href="osFlashCheckEraseEnd.htm">osFlashCheckEraseEnd</a></b> <img SRC="../../gif/new52.gif" ></td>

<td><font size=-1>Verifies the status after Flash is deleted.</font></td>
</tr>

<tr>
<td><b><a href="osFlashWriteBuffer.htm">osFlashWriteBuffer</a></b> <img SRC="../../gif/new52.gif" ></td>

<td><font size=-1>Writes data to Flash buffer.</font></td>
</tr>

<tr>
<td><b><a href="osFlashWriteArray.htm">osFlashWriteArray</a></b> <img SRC="../../gif/new52.gif" ></td>

<td><font size=-1>Writes to Flash page.</font></td>
</tr>

<tr>
<td><b><a href="osFlashReadArray.htm">osFlashReadArray</a></b> <img SRC="../../gif/new52.gif" ></td>

<td><font size=-1>Reads data from Flash page.</font></td>
</tr>

<tr>
<td><b><a href="osFlashChange.htm">osFlashChange</a></b> <img SRC="../../gif/new52.gif" ></td>

<td><font size=-1>Switches when multiple Flash is used.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osFlushLog.htm">osFlushLog</a></b></td>

<td WIDTH="500"><font size=-1>Transfers the log data to the host which
will print the log interpreted by the gload program.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osFree.htm">osFree</a></b></td>

<td WIDTH="500"><font size=-1>After executing a buffer address check, it
returns the buffer to the free list for the region.</font></td>
</tr>

<tr>
<td><a NAME="osGbpak" href="osGbpakCheckConnector.htm"></a><a NAME="osGbpak" href="osGbpakCheckConnector.htm"></a><a NAME="osGbpak" href="osGbpakCheckConnector.htm"></a><b><a href="osGbpakCheckConnector.htm" name="osGbpak">osGbpakCheckConnector</a></b></td>

<td><font size=-1>Checks the Game Boy game pak connector.</font></td>
</tr>

<tr>
<td><b><a href="osGbpakGetStatus.htm">osGbpakGetStatus</a></b></td>

<td><font size=-1>Detects the status of the N64 Game Boy Pak.</font></td>
</tr>

<tr>
<td><b><a href="osGbpakInit.htm">osGbpakInit</a></b></td>

<td><font size=-1>Initializes the N64 Game Boy Pak hardware and control
structure pfs.</font></td>
</tr>

<tr>
<td><b><a href="osGbpakPower.htm">osGbpakPower</a></b></td>

<td><font size=-1>Turns power ON/OFF to the N64 Game Boy Game Pak.</font></td>
</tr>

<tr>
<td><b><a href="osGbpakReadId.htm">osGbpakReadId</a></b></td>

<td><font size=-1>Reads the Game Boy Game Pak registration area.</font></td>
</tr>

<tr>
<td><b><a href="osGbpakReadWrite.htm">osGbpakReadWrite</a></b></td>

<td><font size=-1>Reads/writes to the memory of the Game Boy game pak using
the N64 Game Boy Pak.</font></td>
</tr>

<tr>
<td WIDTH="210"><a NAME="osGet" href="osGetCause.htm"></a><a NAME="osGet" href="osGetCause.htm"></a><a NAME="osGet" href="osGetCause.htm"></a><b><a href="osGetCause.htm" name="osGet">osGetCause</a></b></td>

<td WIDTH="500"><font size=-1>Returns the current value of the MIPS R4300
Cause register that describes the cause of the most recent exception.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osGetCompare.htm">osGetCompare</a></b></td>

<td WIDTH="500"><font size=-1>Returns the current value of the R4300 Compare
register.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osGetConfig.htm">osGetConfig</a></b></td>

<td WIDTH="500"><font size=-1>Returns the current value of the R4300 Configuration
register.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osGetCount.htm">osGetCount</a></b></td>

<td WIDTH="500"><font size=-1>Returns the CPU Counter register.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osGetCurrFaultedThread.htm">osGetCurrFaultedThread</a></b></td>

<td WIDTH="500"><font size=-1>Returns the most recent faulted thread or
NULL.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osGetFpcCsr.htm">osGetFpcCsr</a></b></td>

<td WIDTH="500"><font size=-1>Returns the current value of the R4300 floating-point
control/status register.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osGetIntMask.htm">osGetIntMask</a></b></td>

<td WIDTH="500"><font size=-1>Gets the enabled interrupt mask.</font></td>
</tr>

<tr>
<td><b><a href="osGetMemSize.htm">osGetMemSize</a></b></td>

<td><font size=-1>Checks the Memory Expansion Pak
(for 64DD).</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osGetNextFaultedThread.htm">osGetNextFaultedThread</a></b></td>

<td WIDTH="500"><font size=-1>Returns the next faulted thread from the
active thread queue.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osGetRegionBufCount.htm">osGetRegionBufCount</a></b></td>

<td WIDTH="500"><font size=-1>Returns the total number of buffers created
for the region.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osGetRegionBufSize.htm">osGetRegionBufSize</a></b></td>

<td WIDTH="500"><font size=-1>Returns the size (in bytes) allocated for
each buffer in the region.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osGetSR.htm">osGetSR</a></b></td>

<td WIDTH="500"><font size=-1>Returns the current value of the R4300 Status
register.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osGetTLBASID.htm">osGetTLBASID</a></b></td>

<td WIDTH="500"><font size=-1>Returns the current TLB Address Space ID
in the R4300 EntryHi register.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osGetThreadId.htm">osGetThreadId</a></b></td>

<td WIDTH="500"><font size=-1>Obtains the debugger identifier of a thread.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osGetThreadPri.htm">osGetThreadPri</a></b></td>

<td WIDTH="500"><font size=-1>Returns the priority of the given thread.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osGetTime.htm">osGetTime</a></b></td>

<td WIDTH="500"><font size=-1>Gets the real time counter value.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osInitialize.htm">osInitialize</a></b></td>

<td WIDTH="500"><font size=-1>Performs hardware and software initialization
procedures.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osInitRdb.htm">osInitRdb</a></b></td>

<td WIDTH="500"><font size=-1>Sets up an outgoing buffer for the rdb debug
port.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osInvalDCache.htm">osInvalDCache</a></b></td>

<td WIDTH="500"><font size=-1>Invalidates CPU data cache lines.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osInvalICache.htm">osInvalICache</a></b></td>

<td WIDTH="500"><font size=-1>Invalidates CPU instruction cache lines.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osJamMesg.htm">osJamMesg</a></b></td>

<td WIDTH="500"><font size=-1>Creates a message with higher priority.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osLogEvent.htm">osLogEvent</a></b></td>

<td WIDTH="500"><font size=-1>Adds an entry to the given log.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osMalloc.htm">osMalloc</a></b></td>

<td WIDTH="500"><font size=-1>Returns a pointer to the buffer in the region.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osMapTLB.htm">osMapTLB</a></b></td>

<td WIDTH="500"><font size=-1>Sets the TLB entry index (ranges from 0 to
31).</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osMemSize.htm">osMemSize</a></b></td>

<td WIDTH="500"><font size=-1>Holds the installed main memory (DRAM) size
in bytes.</font></td>
</tr>

<tr>
<td WIDTH="210"><a NAME="osMotor" href="osMotorInit.htm"></a><a NAME="osMotor" href="osMotorInit.htm"></a><a NAME="osMotor" href="osMotorInit.htm"></a><b><a href="osMotorInit.htm" name="osMotor">osMotorInit</a></b></td>

<td WIDTH="500"><font size=-1>Initializes the Rumble Pak.</font></td>
</tr>

<tr>
<td><b><a href="osMotorStart.htm">osMotorStart</a></b></td>

<td><font size=-1>Starts the Rumble Pak motor.</font></td>
</tr>

<tr>
<td><b><a href="osMotorStop.htm">osMotorStop</a></b></td>

<td><font size=-1>Stops the Rumble Pak motor.</font></td>
</tr>

<tr>
<td WIDTH="210"><a NAME="osPfs" href="osPfsAllocateFile.htm"></a><a NAME="osPfs" href="osPfsAllocateFile.htm"></a><a NAME="osPfs" href="osPfsAllocateFile.htm"></a><b><a href="osPfsAllocateFile.htm" name="osPfs">osPfsAllocateFile</a></b></td>

<td WIDTH="500"><font size=-1>Creates a new game note.</font></td>
</tr>

<tr>
<td><b><a href="osPfsChecker.htm">osPfsChecker</a></b></td>

<td><font size=-1>Inspects and repairs the Controller Pak's file system.</font></td>
</tr>

<tr>
<td><b><a href="osPfsDeleteFile.htm">osPfsDeleteFile</a></b></td>

<td><font size=-1>Deletes a Controller Pak game note.</font></td>
</tr>

<tr>
<td><b><a href="osPfsFileState.htm">osPfsFileState</a></b></td>

<td><font size=-1>Obtains game note information.</font></td>
</tr>

<tr>
<td><b><a href="osPfsFindFile.htm">osPfsFindFile</a></b></td>

<td><font size=-1>Searches the specified game note.</font></td>
</tr>

<tr>
<td><b><a href="osPfsFreeBlocks.htm">osPfsFreeBlocks</a></b></td>

<td><font size=-1>Obtains the available number of bytes in a Controller
Pak.</font></td>
</tr>

<tr>
<td><b><a href="osPfsGetLabel.htm">osPfsGetLabel</a></b></td>

<td><font size=-1>Reads the label of a Controller Pak.</font></td>
</tr>

<tr>
<td><b>osPfsInit</b></td>

<td><font size=-1>Removed (please use osPfsInitPak).</font></td>
</tr>

<tr>
<td><b><a href="osPfsInitPak.htm">osPfsInitPak</a></b></td>

<td><font size=-1>Initializes the Controller Pak's file handle.</font></td>
</tr>

<tr>
<td><b><a href="osPfsIsPlug.htm">osPfsIsPlug</a></b></td>

<td><font size=-1>Detects the Controller Pak inserted to a Controller.</font></td>
</tr>

<tr>
<td><b><a href="osPfsNumFiles.htm">osPfsNumFiles</a></b></td>

<td><font size=-1>Acquires the maximum note number and the number of notes
used.</font></td>
</tr>

<tr>
<td><b><a href="osPfsRepairId.htm">osPfsRepairId</a></b></td>

<td><font size=-1>Repairs the Controller Pak file system.</font></td>
</tr>

<tr>
<td><b><a href="osPfsReadWriteFile.htm">osPfsReadWriteFile</a></b></td>

<td><font size=-1>Reads/writes game note game data.</font></td>
</tr>

<tr>
<td><b><a href="osPfsSetLabel.htm">osPfsSetLabel</a></b></td>

<td><font size=-1>Writes to the Controller Pak label.</font></td>
</tr>

<tr>
<td WIDTH="210"><a NAME="osPi" href="osPiGetCmdQueue.htm"></a><a NAME="osPi" href="osPiGetCmdQueue.htm"></a><a NAME="osPi" href="osPiGetCmdQueue.htm"></a><b><a href="osPiGetCmdQueue.htm" name="osPi">osPiGetCmdQueue</a></b></td>

<td WIDTH="500"><font size=-1>Returns the pointer to the PI manager's command
queue, or NULL.</font></td>
</tr>

<tr>
<td><b><a href="osPiGetStatus.htm">osPiGetStatus</a></b></td>

<td><font size=-1>Returns the hardware status of the peripheral interface
(PI).</font></td>
</tr>

<tr>
<td><b><a href="osPiReadIo.htm">osPiReadIo</a></b></td>

<td><font size=-1>Performs a 32-bit programmed IO read from a specified
PI device address devAddr.</font></td>
</tr>

<tr>
<td><b><a href="osPiStartDma.htm">osPiStartDma</a></b></td>

<td><font size=-1>Sets up DMA transfer between RDRAM and PI device address
space.</font></td>
</tr>

<tr>
<td><b><a href="osPiWriteIo.htm">osPiWriteIo</a></b></td>

<td><font size=-1>Performs a 32-bit programmed IO write from a specified
PI device address devAddr.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osProfile.htm">osProfile</a></b></td>

<td WIDTH="500"><font size=-1>Run time profile for text spaces without
shared sources.</font></td>
</tr>

<tr>
<td><b><a href="osProfileFlush.htm">osProfileFlush</a></b></td>

<td><font size=-1>Programmatically transfers profile data to the gperf
program.</font></td>
</tr>

<tr>
<td><b><a href="osProfileInit.htm">osProfileInit</a></b></td>

<td><font size=-1>Initializes the profiled segment count buffers.</font></td>
</tr>

<tr>
<td><b><a href="osProfileStart.htm">osProfileStart</a></b></td>

<td><font size=-1>Starts the profiler's interval counter.</font></td>
</tr>

<tr>
<td><b><a href="osProfileStop.htm">osProfileStop</a></b></td>

<td><font size=-1>Turns off profiling.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osReadHost.htm">osReadHost</a></b></td>

<td WIDTH="500"><font size=-1>Sets up the connection on the side of the
game that is receiving nbytes of data from the host.</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osRecvMesg.htm">osRecvMesg</a></b></td>

<td WIDTH="500"><font size=-1>Copies the first message in the message queue
"mq" into a address specified by "msg."</font></td>
</tr>

<tr>
<td WIDTH="210"><b><a href="osResetType.htm">osResetType</a></b></td>

<td WIDTH="500"><font size=-1>Saves the cause of a system reboot.</font></td>
</tr>

<tr>
<td><b><a href="osScAddClient.htm">osScAddClient</a></b></td>

<td><font size=-1>Adds a client to the RCP task scheduler.</font></td>
</tr>

<tr>
<td><b><a href="osScGetTaskQ.htm">osScGetTaskQ</a></b></td>

<td><font size=-1>Gets the message queue used for communicating with the
scheduler thread.</font></td>
</tr>

<tr>
<td><b><a href="osScRemoveClient.htm">osScRemoveClient</a></b></td>

<td>&nbsp;</td>
</tr>

<tr>
<td><b><a href="osSendMesg.htm">osSendMesg</a></b></td>

<td><font size=-1>Copies the message "msg" to the end of the given message
queue "mq."</font></td>
</tr>

<tr>
<td><a NAME="osSet" href="osSetCause.htm"></a><a NAME="osSet" href="osSetCause.htm"></a><a NAME="osSet" href="osSetCause.htm"></a><b><a href="osSetCause.htm" name="osSet">osSetCause</a></b></td>

<td><font size=-1>Sets the new value for the MIPS R4300 Cause register.</font></td>
</tr>

<tr>
<td><b><a href="osSetCompare.htm">osSetCompare</a></b></td>

<td><font size=-1>Sets the new value for the R4300 Compare register.</font></td>
</tr>

<tr>
<td><b><a href="osSetConfig.htm">osSetConfig</a></b></td>

<td><font size=-1>Sets the new value for the R4300 Configuration register.</font></td>
</tr>

<tr>
<td><b><a href="osSetEventMesg.htm">osSetEventMesg</a></b></td>

<td><font size=-1>Associates a message queue and message with an event.</font></td>
</tr>

<tr>
<td><b><a href="osSetIntMask.htm">osSetIntMask</a></b></td>

<td><font size=-1>Set the enabled interrupt mask.</font></td>
</tr>

<tr>
<td><b><a href="osSetTLBASID.htm">osSetTLBASID</a></b></td>

<td><font size=-1>Sets a system-wide address space identifier register.</font></td>
</tr>

<tr>
<td><b><a href="osSetThreadPri.htm">osSetThreadPri</a></b></td>

<td><font size=-1>Sets the priority of specified thread.</font></td>
</tr>

<tr>
<td><b><a href="osSetTime.htm">osSetTime</a></b></td>

<td><font size=-1>Sets the real time counter value.</font></td>
</tr>

<tr>
<td><b><a href="osSetTimer.htm">osSetTimer</a></b></td>

<td><font size=-1>Sets an interval or countdown timer.</font></td>
</tr>

<tr>
<td><b><a href="osSpTaskLoad.htm">osSpTaskLoad</a></b></td>

<td><font size=-1>Loads the given task into the serial processor.</font></td>
</tr>

<tr>
<td><b><a href="osSpTaskStart.htm">osSpTaskStart</a></b></td>

<td><font size=-1>Executes osSpTaskStartGo followed by osSpTaskLoad.</font></td>
</tr>

<tr>
<td><b><a href="osSpTaskStartGo.htm">osSpTaskStartGo</a></b></td>

<td><font size=-1>Executes a task in SP.</font></td>
</tr>

<tr>
<td><b><a href="osSpTaskYield.htm">osSpTaskYield</a></b></td>

<td><font size=-1>Requests that the SP"yield".</font></td>
</tr>

<tr>
<td><b><a href="osSpTaskYielded.htm">osSpTaskYielded</a></b></td>

<td><font size=-1>Saves a task structure's appropriate state.</font></td>
</tr>

<tr>
<td><b><a href="osStartThread.htm">osStartThread</a></b></td>

<td><font size=-1>Starts or resumes a thread.</font></td>
</tr>

<tr>
<td><b><a href="osStopThread.htm">osStopThread</a></b></td>

<td><font size=-1>Suspends a thread.</font></td>
</tr>

<tr>
<td><b><a href="osStopTimer.htm">osStopTimer</a></b></td>

<td><font size=-1>Stops an interval or countdown timer.</font></td>
</tr>

<tr>
<td><b><a href="osSyncPrintf.htm">osSyncPrintf</a></b></td>

<td><font size=-1>Outputs formatted text to degbug port.</font></td>
</tr>

<tr>
<td><b><a href="osTestHost.htm">osTestHost</a></b></td>

<td><font size=-1>Simply returns a 0 until data from host is read.</font></td>
</tr>

<tr>
<td><a NAME="osThread"></a><b><a href="osThreadProfileInit.htm">osThreadProfileInit</a></b></td>

<td><font size=-1>Initializes the Thread Profiler.</font></td>
</tr>

<tr>
<td><b><a href="osThreadProfileClear.htm">osThreadProfileClear</a></b></td>

<td><font size=-1>Initializes the Thread Profile data of the specified
ID.</font></td>
</tr>

<tr>
<td><b><a href="osThreadProfileStart.htm">osThreadProfileStart</a></b></td>

<td><font size=-1>Starts measuring the Thread Profiler.</font></td>
</tr>

<tr>
<td><b><a href="osThreadProfileStop.htm">osThreadProfileStop</a></b></td>

<td><font size=-1>Stops the Thread Profiler.</font></td>
</tr>

<tr>
<td><b><a href="osThreadProfileReadCount.htm">osThreadProfileReadCount</a></b></td>

<td><font size=-1>Acquires the number of switching threads.</font></td>
</tr>

<tr>
<td><b><a href="osThreadProfileReadCountTh.htm">osThreadProfileReadCountTh</a></b></td>

<td><font size=-1>Acquires the number of switching threads.</font></td>
</tr>

<tr>
<td><b><a href="osThreadProfileReadTime.htm">osThreadProfileReadTime</a></b></td>

<td><font size=-1>Acquires accumulated execution time of the thread.</font></td>
</tr>

<tr>
<td><b><a href="osThreadProfileReadTimeTh.htm">osThreadProfileReadTimeTh</a></b></td>

<td><font size=-1>Acquires accumulated execution time of the thread.</font></td>
</tr>

<tr>
<td><b><a href="osTvType.htm">osTvType</a></b></td>

<td><font size=-1>Returns if the N64 system is configured for PAL video
timing (0), NTSC (1), or MPAL (2).</font></td>
</tr>

<tr>
<td><b><a href="osUnmapTLB.htm">osUnmapTLB</a></b></td>

<td><font size=-1>Removes any existing even or odd page mapping for the
TLB entry index.</font></td>
</tr>

<tr>
<td><b><a href="osUnmapTLBAll.htm">osUnmapTLBAll</a></b></td>

<td><font size=-1>Removes all mappings at all indexes.</font></td>
</tr>

<tr>
<td><a NAME="osVi" href="osViBlack.htm"></a><a NAME="osVi" href="osViBlack.htm"></a><a NAME="osVi" href="osViBlack.htm"></a><b><a href="osViBlack.htm" name="osVi">osViBlack</a></b></td>

<td><font size=-1>Blacks out the screen until a vertical retrace signal
is generated.</font></td>
</tr>

<tr>
<td><b><a href="osViFade.htm">osViFade</a></b></td>

<td><font size=-1>Fades between the first 2 scan lines of the frame buffer.</font></td>
</tr>

<tr>
<td><b><a href="osViGetCurrentField.htm">osViGetCurrentField</a></b></td>

<td><font size=-1>Returns the field number (either 0 or 1) currently being
used by the video interface.</font></td>
</tr>

<tr>
<td><b><a href="osViGetCurrentFramebuffer.htm">osViGetCurrentFramebuffer</a></b></td>

<td><font size=-1>Returns the pointer to the currently displayed framebuffer.</font></td>
</tr>

<tr>
<td><b><a href="osViGetCurrentLine.htm">osViGetCurrentLine</a></b></td>

<td><font size=-1>Returns the current half line, sampled once per line.</font></td>
</tr>

<tr>
<td><b><a href="osViGetCurrentMode.htm">osViGetCurrentMode</a></b></td>

<td><font size=-1>Returns the video interface (VI) mode that is currently
being used.</font></td>
</tr>

<tr>
<td><b><a href="osViGetNextFramebuffer.htm">osViGetNextFramebuffer</a></b></td>

<td><font size=-1>Returns the pointer to the next framebuffer to be displayed.</font></td>
</tr>

<tr>
<td><b><a href="osViGetStatus.htm">osViGetStatus</a></b></td>

<td><font size=-1>Returns the value of the video interface status/control
register.</font></td>
</tr>

<tr>
<td><b><a href="osViRepeatLine.htm">osViRepeatLine</a></b></td>

<td><font size=-1>Repeats the first scan line of the frame buffer for the
entire frame.</font></td>
</tr>

<tr>
<td><b><a href="osViSetEvent.htm">osViSetEvent</a></b></td>

<td><font size=-1>Registers a message queue "mq" and a message "m" with
the VI Manager.</font></td>
</tr>

<tr>
<td><b><a href="osViSetMode.htm">osViSetMode</a></b></td>

<td><font size=-1>Registers the VI and one of the modes to be used at the
next vertical retrace.</font></td>
</tr>

<tr>
<td><b><a href="osViSetSpecialFeatures.htm">osViSetSpecialFeatures</a></b></td>

<td><font size=-1>Allows the caller to enable or disable various video
interface special features.</font></td>
</tr>

<tr>
<td><b><a href="osViSetXScale.htm">osViSetXScale</a></b></td>

<td><font size=-1>Allows scaling the image up horizontally (in the X direction)
to the required display format.</font></td>
</tr>

<tr>
<td><b><a href="osViSetYScale.htm">osViSetYScale</a></b></td>

<td><font size=-1>Allows scaling the image up vertically (in the Y direction)
to the required display format.</font></td>
</tr>

<tr>
<td><b><a href="osViSwapBuffer.htm">osViSwapBuffer</a></b></td>

<td><font size=-1>Registers the frame buffer to be displayed at the next
vertical blank interrupt.</font></td>
</tr>

<tr>
<td><b><a href="osVirtualToPhysical.htm">osVirtualToPhysical</a></b></td>

<td><font size=-1>Converts any CPU physical address to its virtual address.</font></td>
</tr>

<tr>
<td><a NAME="osVoice" href="osVoiceCheckWord.htm"></a><a NAME="osVoice" href="osVoiceCheckWord.htm"></a><a NAME="osVoice" href="osVoiceCheckWord.htm"></a><b><a href="osVoiceCheckWord.htm" name="osVoice">osVoiceCheckWord</a></b></td>

<td><font size=-1>Checks words registered in the Voice Recognition System.</font></td>
</tr>

<tr>
<td><b><a href="osVoiceClearDictionary.htm">osVoiceClearDictionary</a></b></td>

<td><font size=-1>Initializes the Voice Recognition System word registration
dictionary.</font></td>
</tr>

<tr>
<td><b><a href="osVoiceControlGain.htm">osVoiceControlGain</a></b></td>

<td><font size=-1>Adjust the Voice Recognition System input gain.</font></td>
</tr>

<tr>
<td><b><a href="osVoiceCountSyllables.htm">osVoiceCountSyllables</a></b></td>

<td><font size=-1>Calculates the semi-syllables in a registered word in
the Voice Recognition System.</font></td>
</tr>

<tr>
<td><b><a href="osVoiceGetReadData.htm">osVoiceGetReadData</a></b></td>

<td><font size=-1>Gets the Voice Recognition System voice recognition results.</font></td>
</tr>

<tr>
<td><b><a href="osVoiceInit.htm">osVoiceInit</a></b></td>

<td><font size=-1>Initializes the Voice Recognition System structures and
hardware.</font></td>
</tr>

<tr>
<td><b><a href="osVoiceMaskDictionary.htm">osVoiceMaskDictionary</a></b></td>

<td><font size=-1>Masks the registered words in the Voice Recognition System.</font></td>
</tr>

<tr>
<td><b><a href="osVoiceSetWord.htm">osVoiceSetWord</a></b></td>

<td><font size=-1>Registers a word in the Voice Recognition System dictionary.</font></td>
</tr>

<tr>
<td><b><a href="osVoiceStartReadData.htm">osVoiceStartReadData</a></b></td>

<td><font size=-1>Starts voice recognition by the Voice Recognition System.</font></td>
</tr>

<tr>
<td><b><a href="osVoiceStopReadData.htm">osVoiceStopReadData</a></b></td>

<td><font size=-1>Forcibly stops voice recognition processing by the Voice
Recognition System.</font></td>
</tr>

<tr>
<td><b><a href="osPhysicalToVirtual.htm">osPhysicalToVirtual</a></b></td>

<td><font size=-1>Converts any CPU physical address to its virtual address.</font></td>
</tr>

<tr>
<td><b><a href="osWriteHost.htm">osWriteHost</a></b></td>

<td><font size=-1>Attempts to copy nbytes of data from the game starting
at vAddr to the host.</font></td>
</tr>

<tr>
<td><b><a href="osWritebackDCache.htm">osWritebackDCache</a></b></td>

<td><font size=-1>Writes back data cache lines.</font></td>
</tr>

<tr>
<td><b><a href="osWritebackDCacheAll.htm">osWritebackDCacheAll</a></b></td>

<td><font size=-1>Writes back all cached locations to physical memory.</font></td>
</tr>

<tr>
<td><b><a href="osYieldThread.htm">osYieldThread</a></b></td>

<td><font size=-1>Yields the CPU and invokes the thread dispatcher.</font></td>
</tr>
</table>

<h3>
<a NAME="deleted"></a>Functions removed</h3>
<b><a href="osPfsReSizeFile.htm">osPfsReSizeFile</a></b>
<p><b><a href="osPfsInit.htm">osPfsInit</a></b>
<p><b><a href="osViExtendVStart.htm">osViExtendVStart</a></b>
<p><table border=1 cellpadding=3>
<tr>
<td><b><a href="osEPiRawStartDma.htm">osEPiRawStartDma</a></b>
<br><b><a href="osEPiRawWriteIo.htm">osEPiRawWriteIo</a></b>
<br><b><a href="osEPiRawReadIo.htm">osEPiRawReadIo</a></b>
<br><b><a href="osPiRawReadIo.htm">osPiRawReadIo</a></b>
<br><b><a href="osPiRawStartDma.htm">osPiRawStartDma</a></b>
<br><b><a href="osPiRawWriteIo.htm">osPiRawWriteIo</a></b></td>

<td>Removed in OS2.0I/patch5 or later.
<br>For details, please see <a href="../relnote_i/readme_raw.htm">here</a>.</td>
</tr>
</table>

</body>
</html>
