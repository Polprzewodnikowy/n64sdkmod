<!DOCTYPE HTML PUBLIC "-//IBM//DTD HPB HTML//EN">
<HTML>
<HEAD>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../N64man.css">
<Editor's Notes: JLR made reformating and copy edits.
  PWC- updated formatting
-->
<TITLE>osContStartQuery, osContGetQuery</TITLE>
</HEAD>

<BODY bgcolor="#ffffff">
<font style="font-size: 12pt"><b>osContStartQuery</b></font><font style="font-size: 9pt"><b> (function)</b></font>

<P>osContStartQuery, osContGetQuery<p>

<p><i>Gets status and type of SI device</i></P>

<H3>Syntax</H3>

<p><PRE><CODE>#include &lt;ultra64.h&gt; /* <A HREF="../../header/os.htm">os.h</A> */ s32
osContStartQuery(OSMesgQueue *mq); void
osContGetQuery(OSContStatus *status);</CODE></PRE></p>

<H3>Description</H3>
<P>
The <tt>osContStartQuery</tt> function starts to read the values for SI device status and type which is connected to the controller port and the joyport connector. The <a href="osContGetQuery.htm">osContGetQuery</a> function returns those values to status. By calling these two functions, such statuses can be obtained saying whether a standard Controller is connected to the controller port or that a Controller Pak is inserted to the joyport connector.  These two functions must be paired for use.
</P>

<P>
The message queue, mq, must be the initialized message queue linked to OS_EVENT_SI. See the <a href="osSetEventMesg.htm">osSetEventMesg</a> function in the <i>N64 Online Function Reference Manual</i> to learn how to create this link.
</P>

<P>
The <tt>osContStartQuery</tt> function is called only to issue read command, and the message for completed data reading is returned to the message queue mq. Therefore, the <tt>osContGetQuery</tt> function should be called to obtain data after the <tt>osContStartQuery</tt> function is called, and <a href="osRecvMesg.htm">osRecvMesg</a> receives a message indicating data reading is completed. The <tt>osContStartQuery</tt> function takes around 2 milliseconds to complete its data reading and for <tt>osRecvMesg</tt> to receive a final message. Other processing, such as re-drawing the screen, can be performed while you are waiting.
</P>

<P>
You must supply a memory block large enough for MAXCONTROLLER structures of type osContStatus. Regarding the <a  href="osContSetCh.htm">osContSetCh</a> function, it is fine to set the number of direct-type SI devices to be used, to a value less than the value set for MAXCONTROLLERS, as long as the number of direct-type devices used will not be changed in the future.
</P>
<p>
<PRE><CODE>typedef struct {
    u16     type; 	/* Controller Type */
    u8      status;	/* Joyport Status */
    u8      errno;	/* error from device */
}OSContStatus;</CODE></PRE></p>

<P>
One of the following bits is set to 1 for the value of status-&gt;type, depending on which kind of direct- SI device is inserted to the controller port. 0 is returned when no device is inserted to the controller port.
</P>
<p>
<DL>
  <DT><B>CONT_ABSOLUTE</B>
  <DD>This bit is set to 1 when a Standard Controller is connected to the N64 Control Deck.  The connected device is judged to be a Controller if the device has a built-in absolute value counter for counting the amount of movement of the control stick as an absolute value from the origin.  As of December 1998, this bit is only set when the Controller is attached.
  <BR><BR>
  <DT><B>CONT_RELATIVE</B>
  <DD>This bit is set to 1 when the mouse is attached.  The connected device is judged to be a mouse if the device has a built-in relative counter for counting the amount of movement of the mouse from the current coordinates.  As of December 1998, this bit is only set when the mouse is attached.
  <BR><BR>
  <DT><B>CONT_JOYPORT</B>
  <DD>This bit is set to 1 when a joyport is attached to the direct-type SI device that is connected to the Controller Port.  As of December 1998, the only SI device with a joyport is the Standard Controller.
  <BR><BR>
</DL>
</p>

<P>
Confirm which kind of direct-type SI device is connected to the Controller Port in the following way: 
<ul>
<li>If the status->type value masked with CONT_TYPE_MASK is equal to CONT_TYPE_NORMAL, then a Standard Controller is connected.  (When a Standard Controller is connected, the bits are set to 1 for both CONT_ABSOLUTE and CONT_JOYPORT in status->type.  CONT_TYPE_NORMAL includes the bits for both CONT_ABSOLUTE and CONT_JOYPORT.)  
<P>
<li>If the masked value is equal to CONT_TYPE_MOUSE, that means a mouse is connected.  
<P>
<li>If it is equal to CONT_TYPE_VOICE it means the Voice Recognition System is connected.
</ul>
</P>

<P>
If the direct-type SI device connected to the Controller Port is a Standard Controller, then the status of that joyport can be checked with status->status.  The lower bit in status->status is set to 1.  If nothing is inserted in either the Controller Port or the joyport connector, or if a direct-type SI device that is not a Controller is inserted, then 0 is returned.
</P>
<p>
<DL>
  <DT><B>CONT_CARD_ON</B>
  <DD>This bit is set when a device has been inserted.
  <BR><BR>
  <DT><B>CONT_CARD_PULL</B>
  <DD>This bit is set when the device has been removed. 
  <BR><BR>
</DL>
</p>
<P>
An Error value is set to status-&gt;errno when the function fails to read the status value of SI device. 0 is returned if the function was successful. One of the follwing values is returned should an error occur.
</P>
<p>
<DL>
  <DT><B>CONT_NO_RESPONSE_ERROR</B>
  <DD>There is no response from the Controller. The Controller is not inserted. 
  <BR><BR>
  <DT><B>CONT_OVERRUN_ERROR</B>
  <DD>The controller sends data at a higher data transfer rate than the hardware can handle. In this case, you should ignore the data.
  <BR><BR>
</DL>
</p>
<H3>Example</H3>

<PRE><CODE>void
mainproc(void)
{
   OSMesgQueue  intMesgQueue;
   OSMesg       intMesgBuf[1];
   OSContStatus sdata[MAXCONTROLLERS];
   u8           pattern;

   osCreateMesgQueue(&amp;intMesgQueue, intMesgBuf, 1);
   osSetEventMesg(OS_EVENT_SI, &amp;intMesgQueue, NULL);

   /* Initialize SI device */
   osContInit(&amp;intMesgQueue, &amp;pattern, &amp;sdata[0]);    
   /* start reading SI device status and type */
   osContStartQuery(&amp;intMesgQueue);
            %
            %
   /* Confirm the end of reading */
   osRecvMesg(&amp;intMesgQueue, NULL, OS_MESG_BLOCK);
   /* Obtain SI device status and type */
   osContGetQuery(&amp;sdata[0]);
}</CODE></PRE></p>

<H3>See Also</H3>
<P>
<A HREF="osContInit.htm">osContInit</A>, <A HREF="osContReset.htm">osContReset</A>, <A HREF="osContStartReadData.htm">osContStartReadData</A>, <A HREF="osContGetReadData.htm">osContGetReadData</A>, <A HREF="osContSetCh.htm">osContSetCh</A>, and <A HREF="osSetEventMesg.htm">osSetEventMesg</A>
</P>

<H3>Revision History</H3>
<P>
1999/02/01  Completely revised<br>
1999/04/30  Changed format
</P>

</BODY>
</HTML>
