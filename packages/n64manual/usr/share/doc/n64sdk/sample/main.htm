<html>
<head>
<title>sample</title>
<!-- Editor's Notes: 9/16/1999 Ron Daring, Deleted "nnsample1" and "nnsample2" per NCL's 5.0 version. -->
</head>

<body bgcolor="#FFFFFF">
<BASEFONT FACE="arial" SIZE="-1">

<h2><font face="arial" color="#29296b"> OS Standard Samples</font></h2>

<p> [usr/src/PR/demos/*]</p>

<table border="1" cellspacing="1" cellpadding="2">
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">autofill</strong></font></td>
        <td><img src="sample_gif/autofill.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">This is a simple sample program that measures the performance of painting out the screen.  The screen is painted out with polygons of different size and aspect ratio, and the speed of this process is measured automatically.  The measurement data can be viewed using "gnuplot."  For details see "autofill" sample program README file.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">blockmonkey</strong></font></td>
        <td><img src="sample_gif/blockmonkey.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A simple application to measure performance.  The user can change the display list size and parameters and check the effect at the time of rendering.  Instructions for operating the Controller are displayed on the host screen when the application is executed.  The performance meter at the bottom of the screen displays the time required for polygon rendering.  The CPU processing time required to create the display list is not calculated.  This is so  the animation will not slow down, even when the next frame is not completed in time.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">bumpmap</strong></font></td>
        <td><img src="sample_gif/bumpmap.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A sample program of bump mapping.  For details, see the README file in the bumpmap sample program.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">chrome</strong></font></td>
        <td><img src="sample_gif/chrome.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A sample program for the reflection mapping function.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">ci8fb</strong></font></td>
        <td><img src="sample_gif/ci8fb.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A sample program similar to "autofill," but using an 8bit color index for rendering.  For details, see the README file in the ci8fb sample program.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">detail</strong></font></td>
        <td><img src="sample_gif/detail.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">This sample program explains how to use multi-tile textures.  The demo includes both detail textures and MIP map textures.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">ddspgame</strong></font></td>
        <td>&nbsp;</td>
        <td><font face="arial" size="-1">This sample is an example of hdd.h, which is an upper module of leo.h.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">eeptest</strong></font></td>
        <td><img src="sample_gif/eeptest.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A simple program to test EEPROM (4k or 16k).</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">fogworld</strong></font></td>
        <td><img src="sample_gif/fogworld.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">This sample program shows how to use the fog process and the volume culling process.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">gbpak</strong></font></td>
        <td>&nbsp;</td>
        <td><font face="arial" size="-1">This is a sample program for N64 GB Pak.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">ground</strong></font></td>
        <td><img src="sample_gif/ground.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A sample program for accurately clipping a large ground plane.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">gs2dex</strong></font></td>
        <td><img src="sample_gif/gs2dex.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">This sample program explains how to use the S2DEX sprite microcode.  You need "perl" to compile this program.  Please install the below package from the IRIX CD.
<p>eoe2.sw.gifts_perl (for IRIX5.3)/eoe.sw.gifts_perl (for IRIX6.X)</font></p>
        </td>
    </tr>
    
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">lights</strong></font></td>
        <td><img src="sample_gif/lights.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">Shadows and specular highlight effects using RSP textures are rendered, then their  position and size are controlled using inputs from the Controller.  The background is rendered with MIP mapping.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">mipmap</strong></font></td>
        <td><img src="sample_gif/mipmap.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">Demonstrates MIP mapping.  You can compare this with other texture processes, and check what happens when the MIP map parameters are changed.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">morphcube</strong></font></td>
        <td><img src="sample_gif/morphcube.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">Uses the CPU to calculate the morphing of each vertex.  The CPU and the graphics pipeline execute two consecutive frames in parallel.  Large MIP map textures are tiled so they can be accommodated in texture memory.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">morphfaces</strong></font></td>
        <td><img src="sample_gif/morphfaces.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">Morphs a two-dimensional image.  The CPU performs vertex morphing, and blending is performed in 2-cycle mode.  For details, see the NOTES file in the "morphfaces" sample program.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">motortest</strong></font></td>
        <td><img src="sample_gif/motortest.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A sample program for the Rumble Pak.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">nosPak</strong></font></td>
        <td><img src="sample_gif/nospak.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A sample program for the Controller Pak menu using N64 font data.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">onetri<BR>onetri-fpal</strong></font></td>
        <td><img src="sample_gif/onetri.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A simple sample program for rendering 1 polygon without Z buffer processing.  You can perform simple texture mapping by executing with "gload -a -t".</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">overlay</strong></font></td>
        <td><img src="sample_gif/onetri.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">This sample program performs an overlay of the "onetri" code.  (Two different segments, including code and data, share the same region in memory.)</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">pfs</strong></font></td>
        <td><img src="sample_gif/pfs.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A sample program for the Controller Pak that lets you experiment with checking, creating and deleting game notes. The control operations are as follows:
<br> C-UP...Check file system  C-DOWN...Delete game note  
<br>C-LEFT...Create game note  C-RIGHT... Format Controller Pak 
<br>A...Game note read test B...Game note write test  START...Re-read and display.
<br>  Note that this differs from the Controller Pak menu that comes with the application. For Controller Pak menu, see the nosPak sample program.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">playseq</strong></font></td>
        <td><img src="sample_gif/playseq.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A sample program using the sequence player.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">playseq.naudio</strong></font></td>
        <td>&nbsp;</td>
        <td><font face="arial" size="-1">This is the sample program playseq, modified to correspond to n_audio.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">polyline</strong></font></td>
        <td><img src="sample_gif/polyline.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">Switches between polygon and line microcode for rendering.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">reboot</strong></font></td>
        <td>&nbsp;</td>
        <td><font face="arial" size="-1">This is the sample program to re-boot the sequence.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">soundmonkey</strong></font></td>
        <td><img src="sample_gif/soundmonkey.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A sample program using both the sequence player and the sound player.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">spgame</strong></font></td>
        <td><img src="sample_gif/spgame.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A sample program which renders objects in the foreground and the background using sprite functions.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">spritemonkey</strong></font></td>
        <td><img src="sample_gif/spritemonkey.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A sample program demonstrating use of the Sprite2D sprite microcode.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">spritemonkeyEX</strong></font></td>
        <td>&nbsp;</td>
        <td><font face="arial" size="-1">This sample program uses the sprite microcode S2DEX2.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">sramtest</strong></font></td>
        <td> </td>
        <td><font face="arial" size="-1">Tests whether 256K SRAM is operating.  The execution result is returned to the terminal with osSyncPrintf().  Execution requires the 256K SRAM board.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">terrain</strong></font></td>
        <td><img src="sample_gif/terrain.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A sample program for creating geographical features.  The geometry is rendered using the N64 hardware, and the interface is manipulated using the Controller.  Using this tool you can create data and save it to an INDY disk.  It includes Host I/O and demonstrates a number of high-level functions.  For details, see the README file in the "terrain" sample program.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">texlight</strong></font></td>
        <td><img src="sample_gif/texlight.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A sample program that expresses a diffuse lighting process, a specular highlight process, and an object which is texture mapped all at the same time.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">tile_rect2d</strong></font></td>
        <td><img src="sample_gif/tile_rect2d.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A program which demonstrates in a simple way how to divide a large texture into small texture tiles held in texture memory.  Two-dimensional texture rectangle primitives are created.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">tile_rect3d</strong></font></td>
        <td><img src="sample_gif/tile_rect3d.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">A sample program which explains how to divide a large texture into small texture tiles held in texture memory.  The appropriate filtering processes are performed so no joints are created.  Triangles are created.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">threadmonkey</strong></font></td>
        <td>&nbsp;</td>
        <td><font face="arial" size="-1">This sample program demonstrates how to use the thread profiler.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">topgun</strong></font></td>
        <td><img src="sample_gif/topgun.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">The fighter plane in this sample program is .flt format data modeled with Multigen.  In this sample, a display list is created with the accompanying geometry converter flt2c.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">tron</strong></font></td>
        <td><img src="sample_gif/tron.gif" width="160"
        height="120"></td>
        <td><font face="arial" size="-1">The wall is a transparent object that has not been subjected to the sorting process.  This sample demonstrates how to avoid a hung RDP by using the BOWTIE_VAL parameter.</font></td>
    </tr>
    <tr>
        <td align="center" bgcolor="#D5FFD5"><font
        color="#FF0000"><strong><font face="arial">voice</strong></font></td>
        <td>&nbsp;</td>
        <td><font face="arial" size="-1">This sample program is for executing the voice recognition process which uses the Voice Recognition System library functions.</font></td>
    </tr>
    </tr>
</table>
</body>
</html>
