<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<link rel=stylesheet type="text/css" href="../../../mobile/allman.css">
<!--
Editors Notes:
  PWC- updated formatting
-->
<title>STEP2 [A Guide to the N64 Programming] - Chapter 2 Drawing Structure and Samples</title>
<base target="keywords">
</head>

<body bgcolor="#FFFFFF">

<p><font style="font-size:12pt; font-weight:bold">2-4 Use of Frame Buffer</font><br>
<br>
<br>
<b>2-4-1 Double-Buffering Frame Buffers</b><br>
<br>
<br>
N64 accommodates two frame buffers. When one is busy displaying, the other is collecting drawing data for the next frame. This is called <a href="../../../keywords/index/data/graphics.htm#double buffer" target="keywords">double buffering</a>.</p>

<table border="1" cellspacing="0">
    <tr>
        <td><img src="img00008.gif"> </td>
    </tr>
</table>

<p>(The above pictures are extreme examples of this motion)<br>
<br>
<b>Figure 2-4-1 Double-Buffering</b><br>
<br>
<br>
As shown here, because no writing is occurring in the frame <a href="../../../keywords/index/data/system.htm#buffer" target="keywords">buffer</a> that is currently displaying, the N64 can display a complete image while at the same time, in the other buffer, it is writing (buffering) new display data for the next frame. Note that the N64 does not dictate how many frame buffers you can have. You can have as many or as few frame buffers as your game application requires.<br>
<br>
<br>
<br>
<b>2-4-2 Rendering 3D Images</b><br>
<br>
<br>
The N64 hardware is optimized for the 3D graphics process. Therefore, the 3D image drawing process automatically provides <a href="../../../keywords/index/data/graphics.htm#geometry" target="keywords">geometry</a> conversion of the vertex information and executes the process to place the 3D object in the virtual viewing space.</p>

<table border="1" cellspacing="0">
    <tr>
        <td><img src="img00009.gif"> </td>
    </tr>
</table>

<p><br>
<b>Figure 2-4-2 3D Object</b></p>
</body>
</html>
