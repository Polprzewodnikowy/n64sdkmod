<HTML><HEAD>
<TITLE></TITLE>
</HEAD></BODY>
<PRE>#ifndef __SYS_U64DRIVER_H__
#define __SYS_U64DRIVER_H__

<FONT COLOR="red">/*
 * Copyright 1995, Silicon Graphics, Inc.
 * All Rights Reserved.
 *
 * This is UNPUBLISHED PROPRIETARY SOURCE CODE of Silicon Graphics, Inc.;
 * the contents of this file may not be disclosed to third parties, copied or
 * duplicated in any form, in whole or in part, without the prior written
 * permission of Silicon Graphics, Inc.
 *
 * RESTRICTED RIGHTS LEGEND:
 * Use, duplication or disclosure by the Government is subject to restrictions
 * as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
 * and Computer Software clause at DFARS 252.227-7013, and/or in similar or
 * successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
 * rights reserved under the Copyright Laws of the United States.
 *
 */</FONT>

#include &lt;PR/rdb.h&gt;
#include &lt;PR/ramrom.h&gt;
#include &quot;u64gio.h&quot;


#if defined(_LANGUAGE_C) || defined(_LANGUAGE_C_PLUS_PLUS)


#define U64_MINOR_PRINT         1
#define U64_MINOR_DEBUG         2
#define U64_MINOR_LOGGING       3
#define U64_MINOR_DATA		4
#define U64_MINOR_FAULT         5
#define U64_MINOR_KDEBUG        6
#define U64_MINOR_PROFILE       7
#define NUMBER_MINORS           8   <FONT COLOR="red">/* don't use minor zero , but must count 0-7 */</FONT>

#define U64_MINOR_PRINT_BUF_SIZE         0x80000  <FONT COLOR="red">/* buffer used by incoming printf data */</FONT>
#define U64_MINOR_DEBUG_BUF_SIZE         0x4000
#define U64_MINOR_LOGGING_BUF_SIZE       RDB_LOG_MAX_BLOCK_SIZE  <FONT COLOR="red">/* buffer used by incoming logging data */</FONT>
#define U64_MINOR_DATA_BUF_SIZE          RDB_DATA_MAX_BLOCK_SIZE  <FONT COLOR="red">/* buffer used by incoming data */</FONT>
#define U64_MINOR_FAULT_BUF_SIZE         1024    <FONT COLOR="red">/* buffer used for incoming fault data */</FONT>
#define U64_MINOR_KDEBUG_BUF_SIZE        1024    <FONT COLOR="red">/* buffer used for incoming kdebug data */</FONT>
#define U64_MINOR_PROFILE_BUF_SIZE       2048    <FONT COLOR="red">/* buffer used for incoming profile data */</FONT>
#define U64_MINOR_PROFILE_SEND_BUF_SIZE  16      <FONT COLOR="red">/* only send one byte messages */</FONT>
#define U64_INTERNAL_WRITE_BUF_SIZE      0x8000  <FONT COLOR="red">/* buffer used to store packets waiting to go out */</FONT>



#define u64_increment_Qptr(x)	{ ((x) = ((x) + 1) &amp; 0xff) ; }


typedef struct {
    sema_t           minor_sema;     <FONT COLOR="red">/* used to allow only one app to open the minor */</FONT>
    sema_t           read_sema;      <FONT COLOR="red">/* used to block while waiting for data */</FONT>
    sema_t           write_sema;     <FONT COLOR="red">/* only allow one entry to write at a time */</FONT>
    int              read_count;     <FONT COLOR="red">/* the number of bytes waiting to be read */</FONT>
    int              write_count;    <FONT COLOR="red">/* the number of bytes waiting to be written */</FONT>
    int              read_cur_write;
    int              write_cur_write;
    int              read_cur_read;
    int              write_cur_read;
    unsigned char    *read_buf;
    unsigned char    *write_buf;
    int              read_buf_size;  <FONT COLOR="red">/* measured in unsigned char's */</FONT>
    int              write_buf_size;  <FONT COLOR="red">/* measured in unsigned char's */</FONT>
    int              incoming_ct;    <FONT COLOR="red">/* used by minors that receive data from game */</FONT>
                                     <FONT COLOR="red">/* indicates how many bytes left in block  */</FONT>
                                     <FONT COLOR="red">/* before signaling game that transfer is done */</FONT>
                                     <FONT COLOR="red">/* used by logging and game to host data stuff */</FONT>
    int              message;        <FONT COLOR="red">/* when not zero, send this message to game to */</FONT>
                                     <FONT COLOR="red">/* indicate that data or log data has been read */</FONT>
    struct pollhead  *phead;
} u64_minor;

<FONT COLOR="red">/*
 * Our private one-per-board data structure
 * The user can't get at any of this
 */</FONT>
struct u64_data {

    volatile struct u64_board	*board;
    unsigned char		*memaddr;	<FONT COLOR="red">/* 16/32 bit access R/W */</FONT>

    <FONT COLOR="red">/*
     * Only one client may be in the kernel at a time; this semaphore is used
     * to prevent multiple clients from overrunning each other's interactions
     * with the hardware.
     */</FONT>
    sema_t			ioctl_sema;

    <FONT COLOR="red">/*
     * The ramrom_sema is used by the driver so that it can arbitrate for the
     * control of ramrom with the game, and sleep while waiting for the game
     * to respond.
     */</FONT>
    sema_t			ramrom_sema;

    <FONT COLOR="red">/*
     * Allocate a megabyte buffer which we can use when reading/writing data
     * to or from the board (we can't copyin/copyout directly from the user's
     * buffer, because those routines use 64 bit transfers).
     */</FONT>
    unsigned int		*oneMeg;

    union {
	u64_write_arg_t u64_write;	<FONT COLOR="red">/* WRITE, SAFE_WRITE */</FONT>
	u64_read_arg_t u64_read;	<FONT COLOR="red">/* READ, SAFE_READ */</FONT>
    }                           args;

    <FONT COLOR="red">/* rdb port */</FONT>
    unsigned int                *write_buf;
    unsigned int                write_buf_cur_write;
    unsigned int                write_buf_cur_read;
    unsigned int                write_buf_ct;    <FONT COLOR="red">/* number of packets waiting for transmission */</FONT>
    unsigned int                write_buf_size;  <FONT COLOR="red">/* measured in rdbPackets */</FONT>
    sema_t                      write_buf_sema;
    u64_minor                   minors[NUMBER_MINORS];

};

#endif <FONT COLOR="red">/* defined(_LANGUAGE_C) || defined(_LANGUAGE_C_PLUS_PLUS) */</FONT>

#endif <FONT COLOR="red">/* __SYS_U64DRIVER_H__ */</FONT>






</PRE>
</BODY>
