<html>
<head>
<link rel=stylesheet type="text/css" href="../../mobile/allman.css">
<title>Chapter 3 - Hardware Architecture</title>
<!-- Editor: Paula W
      Notes: Added link to style-sheet, performed spell check.-->
</head>

<h1>3.1 Execution Overview</h1>

<p>The CPU and RCP are both processors that can execute at the same time.  <A target="keywords" HREF="../../keywords/index/data/system.htm#thread">Threads</A> execute on the CPU and tasks execute on the RCP.  Access to main memory from threads and tasks also occur in parallel. </p>

<p>The game program runs on the N64 CPU as a collection of threads,each of which has its own <A target="keywords" HREF="../../keywords/index/data/system.htm#stack">stack</A>.  The operating system is a collection of routines that can be called in a thread. The operating system controls which thread is running on the CPU. A thread can access all of physical memory.  Please see Chapter 6, &QUOT;N64 Operating System Overview&QUOT;, for more information.</p>

<p>Tasks run on the RCP, which is a <A target="keywords" HREF="../../keywords/index/data/system.htm#microcode engine">microcode engine</a> that processes a task list. Task lists are generated by a thread running on the N64 CPU and are stored in main memory.   The game program creates the task list, calls an OS routine to load the appropriate <A target="keywords" HREF="../../keywords/index/data/system.htm#microcode">microcode</a>, and then starts the RCP running to process the task list.  The microcode on the RCP reads the task list from main memory. The RCP task can also write into main memory. </p>

<p align="right"><a href="index.htm#index"><img alt="UP" src="../../gif/index.gif" border=0></a></p><hr>
</body> </html>
