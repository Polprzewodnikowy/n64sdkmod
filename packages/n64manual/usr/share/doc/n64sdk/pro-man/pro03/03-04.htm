<html>
<head>
<link rel=stylesheet type="text/css" href="../../mobile/allman.css">
<title>Chapter 3 - Hardware Architecture</title>
<!-- Editor: Paula W
      Notes: Added link to style-sheet, performed spell check.-->
</head>

<h1>3.4 Reality Display Processor (RDP) </h1>

<p>The RDP is the graphics display pipeline that executes an RDP display list generated by the RSP and CPU. The RDP consists of a Rasterizer (RS), a Texture Unit (TU:TX+TF), 4 KB of <a href="../../keywords/index/data/graphics.htm#texture memory" target="keywords">texture memory</a> (<a href="../../keywords/index/data/graphics.htm#TMEM" target="keywords">TMEM</a>), a Color Combiner (CC), a <a href="../../keywords/index/data/graphics.htm#blender" target="keywords">Blender</a> (BL), and a Memory Interface (MI).</p>

<p>The RS <a href="../../keywords/index/data/graphics.htm#rasterize" target="keywords">rasterizes</a> triangles and rectangles.  The TX samples <a href="../../keywords/index/data/graphics.htm#texel" target="keywords">texel</a> (pixel of texture) loaded in TMEM. The TF filters the texture samples.  The CC combines and interpolates between two
colors. The BL blends the resulting pixels with pixels in the frame buffer and performs  <a href="../../keywords/index/data/graphics.htm#Z buffer" target="keywords">Z buffer</a>  and anitaliasing operations.  (A technique to reduce the jagged (aliasing) edge effects by color smoothing between pixels.)  The MI performs the read, modify, and write operations for the individual pixels at either one pixel per clock or one pixel for every two clocks.  The MI also has special modes for loading the TMEM, filling rectangles (fast clears), and copying multiple pixels from the TMEM into the frame buffer (<a href="../../keywords/index/data/graphics.htm#sprite" target="keywords">sprites</a>).</p>

<p>The RDP accesses main memory using physical addresses to load the internal TMEM, read the framebuffer for blending, read the Z buffer for depth comparison, and to
write the Z and frame buffers. The <A target="keywords" HREF="../../keywords/index/data/system.htm#microcode">microcode</a> on the RSP translates the <A target="keywords" HREF="../../keywords/index/data/system.htm#segment address">segmented addresses</A> in the task list into physical addresses. </p>

<p>The <a href="../../keywords/index/data/graphics.htm#global state register" target="keywords">global state registers</a> are used by all stages of the pipeline.  There are a number of sync commands to provide synchronization.  For example, a pipe sync is used before changing one of the rendering modes. This ensures that all previous <a href="../../keywords/index/data/graphics.htm#rendering" target="keywords">rendering</a> affected by the mode change occurs before the mode change.</p>

<p>The command list for the RDP usually comes directly from the RSP. However, it is possible to feed the RDP pipeline from a command list that has been stored in main memory. </p>

<p>Please see <a href="../pro12/index.htm">Chapter 12, "RDP Programming"</a> for more information on the RDP.</p>


<p align="right"><a href="index.htm#index"><img alt="UP" src="../../gif/index.gif" border=0></a></p><hr>
<a name="01"><h2>3.4.1 Video Interface </h2></a>

<p>The video interface reads the data out of the framebuffer in main memory and generates the composite, S-video, and RGB signals.  The video interface also performs the second pass of the antialias algorithm. The video interface works in either NTSC or PAL mode, and can display 15- or 24-bit color pixels, with or without filtering, at both high and low resolutions. The video interface can also scale up a smaller image to fill the screen. 
For more information on how to set one of the 28 video modes and control the special features, see the man page for "<a href="../../n64man/os/osViSetMode.htm">osViSetMode()</a>",<a href="../pro08/index.htm">Chapter 8, "Input/Output Functionality"</a></p>

<p align="right"><a href="index.htm#index"><img alt="UP" src="../../gif/index.gif" border=0></a></p><hr>
<a name="02"><h2>3.4.2 Audio Interface</h2></a>

<p>The audio interface reads audio data out of main memory and generates the stereo audio signal.  Please see <a href="../pro08/index.htm">Chapter 8, "Input/Output Functionality"</a>, <a href="../pro17/index.htm">Chapter 17, "The Audio Library"</a> for more information.</p>

<p align="right"><a href="index.htm#index"><img alt="UP" src="../../gif/index.gif" border=0></a></p><hr>
<a name="03"><h2>3.4.3 Parallel Interface </h2></a>

<p>The parallel interface is the DMA engine that connects to the ROM cartridge.  The PiManager <A target="keywords" HREF="../../keywords/index/data/system.htm#thread">thread</A>  is used to set up the actual DMA commands for all other threads.  Please see <a href="../pro08/index.htm">Chapter 8, "Input/Output Functionality"</a> for the list of PI functions.</p>

<p align="right"><a href="index.htm#index"><img alt="UP" src="../../gif/index.gif" border=0></a></p><hr>
<a name="04"><h2>3.4.4 Serial Interface </h2></a>

<p>The serial interface connects the RCP with the game controllers through the PIF chip.  From the application you cannot inquire about the current state of each controller individually.  To get the current state of the controllers, the application must send a command to query all the game controllers. The data will be available later.  Please see <a href="../pro08/index.htm">Chapter 8, "Input/Output Functionality"</a> for a list of the Controller functions.</p>

<p align="right"><a href="index.htm#index"><img alt="UP" src="../../gif/index.gif" border=0></a></p><hr>
</body> </html>
