<html>
<head>
<link rel=stylesheet type="text/css" href="../../mobile/allman.css">
<title>Chapter 12 - RDP Programming</title>
<!-- Editor: Paula W
      Notes: Added link to style-sheet, performed spell check. -->
</head>

<h1>12.5 TF - Texture Filter </h1>

<p>Texture filter takes the four <a href="../../keywords/index/data/graphics.htm#texel" target="keywords">texels</a> generated by TX and produces a simple bilinear-filtered texel.  The TF can also work together with the color combiner (please see <a href="12-06.htm">Section 12.6, "CC - Color Combiner"</a> to perform <a href="../../keywords/index/data/graphics.htm#YUV" target="keywords">YUV</a>-to-RGB color space conversion).</p>

<dl>
  <dt><a name="f12-08"><strong>Figure 12-8 Texture Filter State and Input/Output</strong></a>
  <dd><img alt="[Figure 12-8]" src="gif/f12-08.gif">
</dl>

<p align="right"><a href="index.htm#index"><img alt="UP" src="../../gif/index.gif" border=0></a></p><hr>
<a name="01"><h2>12.5.1 Filter Types </h2></a>

<p>TF performs three types of filter operations: <a href="../../keywords/index/data/graphics.htm#point sampling" target="keywords">point sampling</a>, <a href="../../keywords/index/data/graphics.htm#box filter" target="keywords">box filter</a>, and bilinear interpolation.  Point sampling just selects the nearest texel to the screen pixel.  In special cases where the screen pixel is always the center of four texels, the box filter can be used. In a typical 3D, arbitrarily rotated <a href="../../keywords/index/data/graphics.htm#polygon" target="keywords">polygon</a>, the bilinear filter is the best choice available.  </p>

<p><strong>Note:</strong>  For hardware cost reduction, the RDP does not implement a true bilinear filter. Instead, the three nearest texels are linearly interpolated to produce the result pixels.  This has a natural triangulation bias. This artifact is not noticeable in normal texture images.  However, in regular pattern images, it can be noticed. For example, notches can be seen in the crosshair on a image of grids. This can be eliminated by prefiltering the image with a wider filter. </p>
<table border=1 align="center">
  <caption><a name="t12-18"><strong>Table  12-18 gsSetTextureFilter(type)</strong></a></caption>
  <tr><th>Parameter</th><th>Values</th></tr>
  <tr><td align="center">type</td><td>G_TF_POINT<br>
                G_TF_AVERAGE<br>
                G_TF_BILERP</td></tr>
</table>

<p align="right"><a href="index.htm#index"><img alt="UP" src="../../gif/index.gif" border=0></a></p><hr>
<a name="02"><h2>12.5.2 Color Space Conversion</h2></a>

<p>Color space conversion can be used to convert YUV textures into RGB. This could be a useful compression technique, or it could be used for <a href="../../keywords/index/data/graphics.htm#MPEG" target="keywords">MPEG</a> video, or for special effects.</p>

<table border=1 align="center">
  <caption><a name="t12-19"><strong>Table  12-19 gsSetTextureConvert(mode)</strong></a></caption>
  <tr><th>Parameter</th><th>Values</th></tr>
  <tr><td align="center">mode</td><td>G_TF_CONV<br>
                G_TF_FILTCONV<br>
                G_TF_FILT</td></tr>
</table>

<p></p>

<table border=1 align="center">
  <caption><a name="t12-20"><strong>Table  12-20 gsSetConvert(k0,k1,k2,k3,k4,k5)</strong></a></caption>
  <tr><th>Parameter</th><th>Values</th></tr>
  <tr><td align="center">k0, k1, k2</td><td>G_CV_K0, G_CV_K1, G_CV_K2</td></tr>
  <tr><td align="center">k3, k4, k5</td><td>G_CV_K3, G_CV_K4, C_CV_K5</td></tr>
</table>

<p><strong>Note:</strong>  The default state of the RDP is G_TF_CONV (perform YUV2RGB), which is probably not what you want (if you are using RGB textures). A common bug is to forget to set this (usually it should be G_TF_FILT).</p>


<p align="right"><a href="index.htm#index"><img alt="UP" src="../../gif/index.gif" border=0></a></p><hr>
</body> </html>
