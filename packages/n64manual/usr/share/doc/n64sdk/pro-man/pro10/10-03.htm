<html>
<head>
<link rel=stylesheet type="text/css" href="../../mobile/allman.css">
<title>Chapter 10 - Advanced Memory Management</title>
<!-- Editor: Paula W
      Notes: Added link to style-sheet, performed spell check. -->
</head>

<h1>10.3 Using Overlays</h1>

<p>The total application code size and data will probably be greater than what is actively being used at any point in time.  To conserve DRAM, applications may choose to only have active code and data resident.  To facilitate this, the application can be partitioned into a number of <A target="keywords" HREF="../../keywords/index/data/system.htm#segment">segments</A>, where some segments share the same memory region during different phases of execution.  Here is an excerpt from a specification file that contains a <A target="keywords" HREF="../../keywords/index/data/system.htm#kernel">kernel</A> code segment that can call routines in either of two <A target="keywords" HREF="../../keywords/index/data/system.htm#overlay">overlay</A>
segments, texture and plain: </p>

<blockquote><pre>
beginseg
    name    "kernel"
    flags   BOOT OBJECT
    entry   boot
    stack   bootStack + STACKSIZE
    include "kernel.o"
    include "$(ROOT)/usr/lib/PR/rspboot.o"
    include "$(ROOT)/usr/lib/PR/gspFast3D.o"
endseg

beginseg
    name    "plain"
    flags   "OBJECT"
    after   "kernel"
    include "plain.o"
endseg

beginseg
    name    "texture"
    flags   "OBJECT"
    after   "kernel"
    include "texture.o"
endseg

beginwave
    name    "overlay"
    include "kernel"
    include "plain"
    include "texture"
endwave
</pre></blockquote>

<p>Note the use of the after keyword to place both of the overlay segments at the same address.  Also note that makerom must be called with the -o option to disable the checking of overlapping segments in the above specification file.</p>

<p>Prior to loading a segment into memory, the application must invalidate the corresponding instruction and data cache lines.  The <a href="../../n64man/tool/makerom.htm">makerom()</a> makes appropriate symbols available to the application that can be used to construct the arguments to the <a href="../../n64man/os/osInvalICache.htm">osInvalICache()</a> and <a href="../../n64man/os/osInvalDCache.htm">osInvalDCache()</a> routines.  Then the actual DMA from ROM to DRAM
may be performed, as well as the clearing of the uninitialized data (<A target="keywords" HREF="../../keywords/index/data/system.htm#Bss">BSS</A>) section of the segment.  Again, <a href="../../n64man/tool/makerom.htm">makerom()</a> generated symbols may be used for the bzero() call. After the segment is loaded, any procedure in the segment may be called or any data in the segment referenced. Following is sample code that illustrates the entire process:  </p>

<blockquote><pre>
extern    char    _plainSegmentRomStart[],_plainSegmentRomEnd[];
extern    char    _plainSegmentStart[];
extern    char    _plainSegmentTextStart[],_plainSegmentTextEnd[];
extern    char    _plainSegmentDataStart[],_plainSegmentDataEnd[];
extern    char    _plainSegmentBssStart[],_plainSegmentBssEnd[];

<a href="../../n64man/os/osInvalICache.htm">osInvalICache</a>(_plainSegmentTextStart,
    _plainSegmentTextEnd-_plainSegmentTextStart);
<a href="../../n64man/os/osInvalDCache.htm">osInvalDCache</a>(_plainSegmentDataStart,
    _plainSegmentDataEnd-_plainSegmentDataStart);
<a href="../../n64man/os/osPiStartDma.htm">osPiStartDma</a>(&amp;dmaIOMessageBuf,OS_MESG_PRI_NORMAL,OS_READ,
    (u32)_plainSegmentRomStart,_plainSegmentStart,
    (u32)_plainSegmentRomEnd - (u32)_plainSegmentRomStart,
    &amp;dmaMessageQ);

bzero(_plainSegmentBssStart,
    _plainSegmentBssEnd-_plainSegmentBssStart);
(void)<a href="../../n64man/os/osRecvMesg.htm">osRecvMesg</a>(&amp;dmaMessageQ, NULL, OS_MESG_BLOCK);
</pre></blockquote>


<p align="right"><a href="index.htm#index"><img alt="UP" src="../../gif/index.gif" border=0></a></p><hr>
</body> </html>
