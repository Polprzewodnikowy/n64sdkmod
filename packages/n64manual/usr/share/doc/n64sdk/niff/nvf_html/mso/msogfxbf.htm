<HTML>
<HEAD>
<TITLE>msogfxbf</TITLE>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../../../mobile/allman.css">
<!-- Editor's Notes: 9/23/1999 Ron Daring -->
</HEAD>
  <BODY bgcolor="#FFFFFF">
<h1>Function</h1>

<hr>
<a name="msoGfxBufferInit">
</A>
<h1><a name="msoGfxBufferInit">msoGfxBufferInit</A></h1>
<a name="msoGfxBufferInit">
</A>
<p><a name="msoGfxBufferInit"><i>Manages a dynamic</i> <TT>gfx</TT> <i>buffer</i></A></p>
<a name="msoGfxBufferInit">
</A>
<H2><a name="msoGfxBufferInit">Syntax</A></H2>
<a name="msoGfxBufferInit">
</A>
<blockquote><a name="msoGfxBufferInit">
    </A>
<pre><a name="msoGfxBufferInit">#include &lt;mso/GfxBuffer.h&gt;
void msoGfxBufferInit( MsoGfxBuffer *buffer_ptr );
</A></pre></blockquote>
<a name="msoGfxBufferInit">
</A>
<H2><a name="msoGfxBufferInit">Description</A></H2>
<a name="msoGfxBufferInit">
  Manages a dynamic <TT>gfx</TT> buffer

</A>
<hr>

<a name="msoGfxBufferDestroy">
</A>
<h1><a name="msoGfxBufferDestroy">msoGfxBufferDestroy</A></h1>
<a name="msoGfxBufferDestroy">
</A>
<p><a name="msoGfxBufferDestroy"><i>Destroys the</i> <TT>gfx</TT> <i>buffer</i></A></p>
<a name="msoGfxBufferDestroy">
</A>
<H2><a name="msoGfxBufferDestroy">Syntax</A></H2>
<a name="msoGfxBufferDestroy">
</A>
<blockquote><a name="msoGfxBufferDestroy">
    </A>
<pre><a name="msoGfxBufferDestroy">#include &lt;mso/GfxBuffer.h&gt;
void msoGfxBufferDestroy( MsoGfxBuffer *buffer_ptr );
</A></pre></blockquote>
<a name="msoGfxBufferDestroy">
</A>
<H2><a name="msoGfxBufferDestroy">Description</A></H2>
<a name="msoGfxBufferDestroy">
  Destroys the <TT>gfx</TT> buffer.  All memory held for <TT>gfx</TT> storage will be released.

</A>
<hr>

<a name="msoGfxBufferReserve">
</A>
<h1><a name="msoGfxBufferReserve">msoGfxBufferReserve</A></h1>
<a name="msoGfxBufferReserve">
</A>
<p><a name="msoGfxBufferReserve"><i>Reserves one area for</i> <TT>gfx</TT> <i>and returns its pointer</i></A></p>
<a name="msoGfxBufferReserve">
</A>
<H2><a name="msoGfxBufferReserve">Syntax</A></H2>
<a name="msoGfxBufferReserve">
</A>
<blockquote><a name="msoGfxBufferReserve">
    </A>
<pre><a name="msoGfxBufferReserve">#include &lt;mso/GfxBuffer.h&gt;
void msoGfxBufferReserve( MsoGfxBuffer *buffer_ptr );
</A></pre></blockquote>
<a name="msoGfxBufferReserve">
</A>
<H2><a name="msoGfxBufferReserve">Description</A></H2>
<a name="msoGfxBufferReserve">
  Reserves one area for <TT>gfx</TT> and returns its pointer 

</A>
<hr>

<a name="msoGfxBufferStore">
</A>
<h1><a name="msoGfxBufferStore">msoGfxBufferStore</A></h1>
<a name="msoGfxBufferStore">
</A>
<p><a name="msoGfxBufferStore"><i>Writes all</i> <TT>gfx</TT> <i>stored in the</i> <TT>gfx</TT> <i>buffer to</i> <TT>dest_array</TT></A></p>
<a name="msoGfxBufferStore">
</A>
<H2><a name="msoGfxBufferStore">Syntax</A></H2>
<a name="msoGfxBufferStore">
</A>
<blockquote><a name="msoGfxBufferStore">
    </A>
<pre><a name="msoGfxBufferStore">#include &lt;mso/GfxBuffer.h&gt;
void msoGfxBufferStore( MsoGfxBuffer *buffer_ptr, Gfx *dest_array );
</A></pre></blockquote>
<a name="msoGfxBufferStore">
</A>
<H2><a name="msoGfxBufferStore">Description</A></H2>
<a name="msoGfxBufferStore">
  Writes all <TT>gfx</TT> stored in the <TT>gfx</TT> buffer to <TT>dest_array</TT>. 
  Before calling this function, an area must be reserved in <TT>dest_array</TT> which is larger than 
  <TT>buffer_ptr->number_of_gfxs</TT>.

<br><br><br>

  </A></BODY>
</HTML>
