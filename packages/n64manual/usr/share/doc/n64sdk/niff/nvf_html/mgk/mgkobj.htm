<HTML>
<HEAD>
<TITLE>mgkobj</TITLE>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../../../mobile/allman.css">
<!-- Editor's Notes: 9/22/1999 Ron Daring -->
</HEAD>
  <BODY bgcolor="#FFFFFF">
<h1>Function</h1>
<hr>
<a name="mgkObjInit">
</A><h1><a name="mgkObjInit">mgkObjInit</A></h1><a name="mgkObjInit">
</A><p><a name="mgkObjInit"><i>Initializes an object.</i></A></p><a name="mgkObjInit">
</A><H2><a name="mgkObjInit">Syntax</A></H2><a name="mgkObjInit">
</A><blockquote><a name="mgkObjInit">
    </A><pre><a name="mgkObjInit">#include &lt;mgk/Obj.h&gt;
void mgkObjInit( MgkObj *obj_ptr, const u32 module_index );
</A></pre><a name="mgkObjInit">
</A></blockquote><a name="mgkObjInit">
</A><H2><a name="mgkObjInit">Description</A></H2><a name="mgkObjInit">
  Initializes an object.
  An object is associated with the module specified by <TT>module_index</TT>.
</A><H3><a name="mgkObjInit">See Also</A></H3><a name="mgkObjInit">
</A><a href="mgkobj.htm#MgkObj">MgkObj</a><a name="mgkObjInit">


</A><hr>
<a name="mgkObjLoad">
</A><h1><a name="mgkObjLoad">mgkObjLoad</A></h1><a name="mgkObjLoad">
</A><p><a name="mgkObjLoad"><i>Loads an object.</i></A></p><a name="mgkObjLoad">
</A><H2><a name="mgkObjLoad">Syntax</A></H2><a name="mgkObjLoad">
</A><blockquote><a name="mgkObjLoad">
    </A><pre><a name="mgkObjLoad">#include &lt;mgk/Obj.h&gt;
int mgkObjLoad( MgkObj *obj_ptr,
                const u32 rom_start_addr,
                const u32 rom_end_addr )
</A></pre><a name="mgkObjLoad">
</A></blockquote><a name="mgkObjLoad">
</A><H2><a name="mgkObjLoad">Description</A></H2><a name="mgkObjLoad">
  Loads an object.

</A><hr>
<a name="mgkObjUnload">
</A><h1><a name="mgkObjUnload">mgkObjUnload</A></h1><a name="mgkObjUnload">
</A><p><a name="mgkObjUnload"><i>Destroys the object that has been loaded.</i></A></p><a name="mgkObjUnload">
</A><H2><a name="mgkObjUnload">Syntax</A></H2><a name="mgkObjUnload">
</A><blockquote><a name="mgkObjUnload">
    </A><pre><a name="mgkObjUnload">#include &lt;mgk/Obj.h&gt;
void mgkObjUnload( MgkObj *obj_ptr )
</A></pre><a name="mgkObjUnload">
</A></blockquote><a name="mgkObjUnload">
</A><H2><a name="mgkObjUnload">Description</A></H2><a name="mgkObjUnload">
  Destroys the object that has been loaded.

</A><hr>
<a name="mgkObjCreateCamera">
</A><h1><a name="mgkObjCreateCamera">mgkObjCreateCamera</A></h1><a name="mgkObjCreateCamera">
</A><p><a name="mgkObjCreateCamera"><i>Generates camera object.</i></A></p><a name="mgkObjCreateCamera">
</A><H2><a name="mgkObjCreateCamera">Syntax</A></H2><a name="mgkObjCreateCamera">
</A><blockquote><a name="mgkObjCreateCamera">
    </A><pre><a name="mgkObjCreateCamera">#include &lt;mgk/Obj.h&gt;
void mgkObjCreateCamera( MgkObj *obj_ptr,
                         const float fov_y,
                         const float aspect_ratio,
                         const float clip_near,
                         const float clip_far )
</A></pre><a name="mgkObjCreateCamera">
</A></blockquote><a name="mgkObjCreateCamera">
</A><H2><a name="mgkObjCreateCamera">Description</A></H2><a name="mgkObjCreateCamera">
  Generates camera object. Camera itself is considered an object.

</A><hr>
<a name="mgkObjSetAnim">
</A><h1><a name="mgkObjSetAnim">mgkObjSetAnim</A></h1><a name="mgkObjSetAnim">
</A><p><a name="mgkObjSetAnim"><i>Sets animation to an object</i></A></p><a name="mgkObjSetAnim">
</A><H2><a name="mgkObjSetAnim">Syntax</A></H2><a name="mgkObjSetAnim">
</A><blockquote><a name="mgkObjSetAnim">
    </A><pre><a name="mgkObjSetAnim">#include &lt;mgk/Obj.h&gt;
void mgkObjSetAnim( MgkObj *obj_ptr, const s32 anim_index )
</A></pre><a name="mgkObjSetAnim">
</A></blockquote><a name="mgkObjSetAnim">
</A><H2><a name="mgkObjSetAnim">Description</A></H2><a name="mgkObjSetAnim">
  Sets animation to an object

</A><hr>
<a name="mgkObjPlayAnim">
</A><h1><a name="mgkObjPlayAnim">mgkObjPlayAnim</A></h1><a name="mgkObjPlayAnim">
</A><p><a name="mgkObjPlayAnim"><i>Starts to play an animation.</i></A></p><a name="mgkObjPlayAnim">
</A><H2><a name="mgkObjPlayAnim">Syntax</A></H2><a name="mgkObjPlayAnim">
</A><blockquote><a name="mgkObjPlayAnim">
    </A><pre><a name="mgkObjPlayAnim">#include &lt;mgk/Obj.h&gt;
void mgkObjPlayAnim( MgkObj *obj_ptr,
                     const float start,
                     const float end,
                     const float pitch,
                     const int loop )
</A></pre><a name="mgkObjPlayAnim">
</A></blockquote><a name="mgkObjPlayAnim">
</A><H2><a name="mgkObjPlayAnim">Description</A></H2><a name="mgkObjPlayAnim">
  Starts to play an animation.

</A><hr>
<a name="mgkObjMove">
</A><h1><a name="mgkObjMove">mgkObjMove</A></h1><a name="mgkObjMove">
</A><p><a name="mgkObjMove"><i>Moves an object horizontally.</i></A></p><a name="mgkObjMove">
</A><H2><a name="mgkObjMove">Syntax</A></H2><a name="mgkObjMove">
</A><blockquote><a name="mgkObjMove">
    </A><pre><a name="mgkObjMove">#include &lt;mgk/Obj.h&gt;
void mgkObjMove( MgkObj *obj_ptr,
                 const float x, const float y, const float z )
</A></pre><a name="mgkObjMove">
</A></blockquote><a name="mgkObjMove">
</A><H2><a name="mgkObjMove">Description</A></H2><a name="mgkObjMove">
  Moves an object horizontally.

</A><hr>
<a name="mgkObjRotate">
</A><h1><a name="mgkObjRotate">mgkObjRotate</A></h1><a name="mgkObjRotate">
</A><p><a name="mgkObjRotate"><i>Rotates an object</i></A></p><a name="mgkObjRotate">
</A><H2><a name="mgkObjRotate">Syntax</A></H2><a name="mgkObjRotate">
</A><blockquote><a name="mgkObjRotate">
    </A><pre><a name="mgkObjRotate">#include &lt;mgk/Obj.h&gt;
void mgkObjRotate( MgkObj *obj_ptr, const int mode,
                   const float x, const float y, const float z )
</A></pre><a name="mgkObjRotate">
</A></blockquote><a name="mgkObjRotate">
</A><H2><a name="mgkObjRotate">Description</A></H2><a name="mgkObjRotate">
  Rotates an object
  Choose modes from the following
  </A><ul>
    <li><a name="mgkObjRotate"><TT>MGK_OBJ_ROT_XYZ</TT>
    </A><li><a name="mgkObjRotate"><TT>MGK_OBJ_ROT_XZY</TT>
    </A><li><a name="mgkObjRotate"><TT>MGK_OBJ_ROT_YZX</TT>
    </A><li><a name="mgkObjRotate"><TT>MGK_OBJ_ROT_YXZ</TT>
    </A><li><a name="mgkObjRotate"><TT>MGK_OBJ_ROT_ZXY</TT>
    </A><li><a name="mgkObjRotate"><TT>MGK_OBJ_ROT_ZYX</TT>
  </A></ul><a name="mgkObjRotate">
</A><hr>
<a name="mgkObjLookAt">
</A><h1><a name="mgkObjLookAt">mgkObjLookAt</A></h1><a name="mgkObjLookAt">
</A><p><a name="mgkObjLookAt"><i>Negative direction on z axis of an object should point to x_at, y_at, z_at.</i></A></p><a name="mgkObjLookAt">
</A><H2><a name="mgkObjLookAt">Syntax</A></H2><a name="mgkObjLookAt">
</A><blockquote><a name="mgkObjLookAt">
    </A><pre><a name="mgkObjLookAt">#include &lt;mgk/Obj.h&gt;
void mgkObjLookAt( MgkObj *obj_ptr,
                   const float x, const float y, const float z,
                   const float x_at, const float y_at, const float z_at,
                   const float x_up, const float y_up, const float z_up )
</A></pre><a name="mgkObjLookAt">
</A></blockquote><a name="mgkObjLookAt">
</A><H2><a name="mgkObjLookAt">Description</A></H2><a name="mgkObjLookAt">
  Negative direction on z axis of an object should point to x_at, y_at, z_at.
  In this case, the coordinate of the object moves to x, y, and z. The
  positive direction on y axis should point to x_up, y_up, z_up.

</A><hr>
<a name="mgkObjScale">
</A><h1><a name="mgkObjScale">mgkObjScale</A></h1><a name="mgkObjScale">
</A><p><a name="mgkObjScale"><i>Gives scale to an object</i></A></p><a name="mgkObjScale">
</A><H2><a name="mgkObjScale">Syntax</A></H2><a name="mgkObjScale">
</A><blockquote><a name="mgkObjScale">
</A><pre><a name="mgkObjScale">#include &lt;mgk/Obj.h&gt;
void mgkObjScale( MgkObj *obj_ptr,
                  const float x, const float y, const float z )
</A></pre><a name="mgkObjScale">
</A></blockquote><a name="mgkObjScale">
</A><H2><a name="mgkObjScale">Description</A></H2><a name="mgkObjScale">
  Gives scale to an object


</A><hr>
<h1><a name="mgkObjScale">Structure</A></h1><hr>
<hr>
<a name="MgkObj">
</A><h1><a name="MgkObj">MgkObj</A></h1><a name="MgkObj">
</A><blockquote><pre><a name="MgkObj">
#include &lt;mgk/Obj.h&gt;

typedef struct _MgkObj
{
    MvmVector3f         scale;
    MvmVector3f         rotation;
    MvmVector3f         translation;
    MvmVector3f         at;
    MvmVector3f         up;
    int                 rotation_mode;

    u32                 module_index;
    u32                 *camera_mask_ptr;

    u32                 anim_start_frame;
    float               *anim_index_ptr;
    float               *anim_time_ptr;
    float               anim_pitch;
    float               anim_start;
    float               anim_length;
    int                 anim_loop;

    void                *user_data;
} MgkObj;
</A></pre></blockquote><a name="MgkObj">
<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>

  </A></BODY>
</HTML>
