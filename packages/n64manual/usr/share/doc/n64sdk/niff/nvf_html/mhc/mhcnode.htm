<HTML>
<HEAD>
<TITLE>mhcnode</TITLE>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../../../mobile/allman.css">
<!-- Editor's Notes: 9/22/1999 Ron Daring -->
</HEAD>
  <BODY bgcolor="#FFFFFF"><h1>Function</h1>
<hr>
<a name="mhcNodeInit">
</A><h1><a name="mhcNodeInit">mhcNodeInit</A></h1><a name="mhcNodeInit">
</A><p><a name="mhcNodeInit"><i>Initializes node.</i></A></p><a name="mhcNodeInit">
</A><H2><a name="mhcNodeInit">Syntax</A></H2><a name="mhcNodeInit">
</A><blockquote><a name="mhcNodeInit">
    </A><pre><a name="mhcNodeInit">#include &lt;mhc/Node.h&gt;
void mhcNodeInit( MhcNode *node_ptr,
                  const u32 type,
                  MhcNodeEvalFunc evaluate,
                  MhcNodeGetFieldPtrFunc get_field_ptr,
                  MhcNodeBindFunc bind,
                  MhcNodeDestroyFunc destroy )
</A></pre></blockquote><a name="mhcNodeInit">
</A><H2><a name="mhcNodeInit">Description</A></H2><a name="mhcNodeInit">
  Initializes node.

</A><hr>
<a name="mhcNodeBeginEval">
</A><h1><a name="mhcNodeBeginEval">mhcNodeBeginEval</A></h1><a name="mhcNodeBeginEval">
</A><p><a name="mhcNodeBeginEval"><i>Prepares for node evaluation. </i></A></p><a name="mhcNodeBeginEval">
</A><H2><a name="mhcNodeBeginEval">Syntax</A></H2><a name="mhcNodeBeginEval">
</A><blockquote><a name="mhcNodeBeginEval">
    </A><pre><a name="mhcNodeBeginEval">#include &lt;mhc/Node.h&gt;
void mhcNodeBeginEval( MhcNode *node_ptr )
</A></pre></blockquote><a name="mhcNodeBeginEval">
</A><H2><a name="mhcNodeBeginEval">Description</A></H2><a name="mhcNodeBeginEval">
  Prepares for node evaluation. 
</A><H2><a name="mhcNodeBeginEval">See Also</A></H2><a name="mhcNodeBeginEval">
</A><a href="mhcnode.htm#MhcNode">MhcNode</a><a name="mhcNodeBeginEval">

</A><hr>
<a name="mhcNodeIsReadyToEvaluate">
</A><h1><a name="mhcNodeIsReadyToEvaluate">mhcNodeIsReadyToEvaluate</A></h1><a name="mhcNodeIsReadyToEvaluate">
</A><p><a name="mhcNodeIsReadyToEvaluate"><i>Checks whether node can be evaluated.</i></A></p><a name="mhcNodeIsReadyToEvaluate">
</A><H2><a name="mhcNodeIsReadyToEvaluate">Syntax</A></H2><a name="mhcNodeIsReadyToEvaluate">
</A><blockquote><a name="mhcNodeIsReadyToEvaluate">
    </A><pre><a name="mhcNodeIsReadyToEvaluate">#include &lt;mhc/Node.h&gt;
int mhcNodeIsReadyToEvaluate( MhcNode *node_ptr,
                              MhcScene *scene_ptr )
</A></pre></blockquote><a name="mhcNodeIsReadyToEvaluate">
</A><H2><a name="mhcNodeIsReadyToEvaluate">Description</A></H2><a name="mhcNodeIsReadyToEvaluate">
  Checks whether node can be evaluated.

</A><hr>
<a name="mhcNodeComplete">
</A><h1><a name="mhcNodeComplete">mhcNodeComplete</A></h1><a name="mhcNodeComplete">
</A><p><a name="mhcNodeComplete"><i>Completes evaluation of node.</i></A></p><a name="mhcNodeComplete">
</A><H2><a name="mhcNodeComplete">Syntax</A></H2><a name="mhcNodeComplete">
</A><blockquote><a name="mhcNodeComplete">
    </A><pre><a name="mhcNodeComplete">#include &lt;mhc/Node.h&gt;
void mhcNodeComplete( MhcNode *node_ptr, MhcScene *scene_ptr )
</A></pre></blockquote><a name="mhcNodeComplete">
</A><H2><a name="mhcNodeComplete">Description</A></H2><a name="mhcNodeComplete">
  Completes evaluation of node.  Nodes existing in this node can subsequently be evaluated.

</A><hr>
<a name="mhcNodeAddInput">
</A><h1><a name="mhcNodeAddInput">mhcNodeAddInput</A></h1><a name="mhcNodeAddInput">
</A><p><a name="mhcNodeAddInput"><i>Input node</i></A></p><a name="mhcNodeAddInput">
</A><H2><a name="mhcNodeAddInput">Syntax</A></H2><a name="mhcNodeAddInput">
</A><blockquote><a name="mhcNodeAddInput">
    </A><pre><a name="mhcNodeAddInput">#include &lt;mhc/Node.h&gt;
void mhcNodeAddInput( MhcNode *node_ptr, MhcReference *input_ptr )
</A></pre></blockquote><a name="mhcNodeAddInput">
</A><H2><a name="mhcNodeAddInput">Description</A></H2><a name="mhcNodeAddInput">
  Input node
</A><H2><a name="mhcNodeAddInput">See Also</A></H2><a name="mhcNodeAddInput">
</A><a href="mhcref.htm#MhcReference">MhcReference</a><a name="mhcNodeAddInput">

</A><hr>
<a name="mhcNodeRemoveInput">
</A><h1><a name="mhcNodeRemoveInput">mhcNodeRemoveInput</A></h1><a name="mhcNodeRemoveInput">
</A><p><a name="mhcNodeRemoveInput"><i>Cancel input of node.</i></A></p><a name="mhcNodeRemoveInput">
</A><H2><a name="mhcNodeRemoveInput">Syntax</A></H2><a name="mhcNodeRemoveInput">
</A><blockquote><a name="mhcNodeRemoveInput">
    </A><pre><a name="mhcNodeRemoveInput">#include &lt;mhc/Node.h&gt;
void mhcNodeRemoveInput( MhcNode *node_ptr, MhcReference *input_ptr )
</A></pre></blockquote><a name="mhcNodeRemoveInput">
</A><H2><a name="mhcNodeRemoveInput">Description</A></H2><a name="mhcNodeRemoveInput">
  Cancel input of node.
</A><hr>
<a name="mhcNodeAddOutput">
</A><h1><a name="mhcNodeAddOutput">mhcNodeAddOutput</A></h1><a name="mhcNodeAddOutput">
</A><p><a name="mhcNodeAddOutput"><i>Output node</i></A></p><a name="mhcNodeAddOutput">
</A><H2><a name="mhcNodeAddOutput">Syntax</A></H2><a name="mhcNodeAddOutput">
</A><blockquote><a name="mhcNodeAddOutput">
    </A><pre><a name="mhcNodeAddOutput">#include &lt;mhc/Node.h&gt;
void mhcNodeAddOutput( MhcNode *node_ptr, MhcReference *output_ptr )
</A></pre></blockquote><a name="mhcNodeAddOutput">
</A><H2><a name="mhcNodeAddOutput">Description</A></H2><a name="mhcNodeAddOutput">
  Output node

</A><hr>
<a name="mhcNodeRemoveOutput">
</A><h1><a name="mhcNodeRemoveOutput">mhcNodeRemoveOutput</A></h1><a name="mhcNodeRemoveOutput">
</A><p><a name="mhcNodeRemoveOutput"><i>Cancel output of node.</i></A></p><a name="mhcNodeRemoveOutput">
</A><H2><a name="mhcNodeRemoveOutput">Syntax</A></H2><a name="mhcNodeRemoveOutput">
</A><blockquote><a name="mhcNodeRemoveOutput">
    </A><pre><a name="mhcNodeRemoveOutput">#include &lt;mhc/Node.h&gt;
void mhcNodeRemoveOutput( MhcNode *node_ptr, MhcReference *input_ptr )
</A></pre></blockquote><a name="mhcNodeRemoveOutput">
</A><H2><a name="mhcNodeRemoveOutput">Description</A></H2><a name="mhcNodeRemoveOutput">
  Cancel output of node.

</A><hr>
<a name="mhcNodeSetInputMask">
</A><h1><a name="mhcNodeSetInputMask">mhcNodeSetInputMask</A></h1><a name="mhcNodeSetInputMask">
</A><p><a name="mhcNodeSetInputMask"><i>Sets bit mask indicating that input has been resolved.</i></A></p><a name="mhcNodeSetInputMask">
</A><H2><a name="mhcNodeSetInputMask">Syntax</A></H2><a name="mhcNodeSetInputMask">
</A><blockquote><a name="mhcNodeSetInputMask">
    </A><pre><a name="mhcNodeSetInputMask">#include &lt;mhc/Node.h&gt;
void mhcNodeSetInputMask( MhcNode *node_ptr,
                          const u32 mask,
                          MhcScene *scene_ptr )
</A></pre></blockquote><a name="mhcNodeSetInputMask">
</A><H2><a name="mhcNodeSetInputMask">Description</A></H2><a name="mhcNodeSetInputMask">
  Sets bit mask indicating that input has been resolved.


</A><hr>
<h1><a name="mhcNodeSetInputMask">Macros</A></h1><hr>
<hr>
<a name="_mhcNodeActivate">
</A><h1><a name="_mhcNodeActivate">_mhcNodeActivate</A></h1><a name="_mhcNodeActivate">
</A><p><a name="_mhcNodeActivate"><i>Makes it possible to evaluate node. </i></A></p><a name="_mhcNodeActivate">
</A><H2><a name="_mhcNodeActivate">Syntax</A></H2><a name="_mhcNodeActivate">
</A><blockquote><a name="_mhcNodeActivate">
    </A><pre><a name="_mhcNodeActivate">#include &lt;mhc/Node.h&gt;
_mhcNodeActivate(node_ptr)
</A></pre></blockquote><a name="_mhcNodeActivate">
</A><H2><a name="_mhcNodeActivate">Description</A></H2><a name="_mhcNodeActivate">
  Makes it possible to evaluate node. 

</A><hr>
<a name="_mhcNodeInactivate">
</A><h1><a name="_mhcNodeInactivate">_mhcNodeInactivate</A></h1><a name="_mhcNodeInactivate">
</A><p><a name="_mhcNodeInactivate"><i>Makes it so that node cannot be evaluated.</i></A></p><a name="_mhcNodeInactivate">
</A><H2><a name="_mhcNodeInactivate">Syntax</A></H2><a name="_mhcNodeInactivate">
</A><blockquote><a name="_mhcNodeInactivate">
    </A><pre><a name="_mhcNodeInactivate">#include &lt;mhc/Node.h&gt;
_mhcNodeInactivate(node_ptr)
</A></pre></blockquote><a name="_mhcNodeInactivate">
</A><H2><a name="_mhcNodeInactivate">Description</A></H2><a name="_mhcNodeInactivate">
  Makes it so that node cannot be evaluated.

</A><hr>
<a name="_mhcNodeIsActive">
</A><h1><a name="_mhcNodeIsActive">_mhcNodeIsActive</A></h1><a name="_mhcNodeIsActive">
</A><p><a name="_mhcNodeIsActive"><i>Checks whether node can be evaluated.</i></A></p><a name="_mhcNodeIsActive">
</A><H2><a name="_mhcNodeIsActive">Syntax</A></H2><a name="_mhcNodeIsActive">
</A><blockquote><a name="_mhcNodeIsActive">
    </A><pre><a name="_mhcNodeIsActive">#include &lt;mhc/Node.h&gt;
_mhcNodeIsActive(node_ptr)
</A></pre></blockquote><a name="_mhcNodeIsActive">
</A><H2><a name="_mhcNodeIsActive">Description</A></H2><a name="_mhcNodeIsActive">
  Checks whether node can be evaluated.

</A><hr>
<a name="_mhcNodeSetName">
</A><h1><a name="_mhcNodeSetName">_mhcNodeSetName</A></h1><a name="_mhcNodeSetName">
</A><p><a name="_mhcNodeSetName"><i>Sets name</i></A></p><a name="_mhcNodeSetName">
</A><H2><a name="_mhcNodeSetName">Syntax</A></H2><a name="_mhcNodeSetName">
</A><blockquote><a name="_mhcNodeSetName">
    </A><pre><a name="_mhcNodeSetName">#include &lt;mhc/Node.h&gt;
_mhcNodeSetName(node_ptr,name_str)
</A></pre></blockquote><a name="_mhcNodeSetName">
</A><H2><a name="_mhcNodeSetName">Description</A></H2><a name="_mhcNodeSetName">
  Sets name

</A><hr>
<a name="_mhcNodeEvaluate">
</A><h1><a name="_mhcNodeEvaluate">_mhcNodeEvaluate</A></h1><a name="_mhcNodeEvaluate">
</A><p><a name="_mhcNodeEvaluate"><i>Evaluates node</i></A></p><a name="_mhcNodeEvaluate">
</A><H2><a name="_mhcNodeEvaluate">Syntax</A></H2><a name="_mhcNodeEvaluate">
</A><blockquote><a name="_mhcNodeEvaluate">
    </A><pre><a name="_mhcNodeEvaluate">#include &lt;mhc/Node.h&gt;
_mhcNodeEvaluate(node_ptr,instance_ptr,scene_ptr)
</A></pre></blockquote><a name="_mhcNodeEvaluate">
</A><H2><a name="_mhcNodeEvaluate">Description</A></H2><a name="_mhcNodeEvaluate">
  Evaluates node

</A><hr>
<a name="_mhcNodeGetFieldPtr">
</A><h1><a name="_mhcNodeGetFieldPtr">_mhcNodeGetFieldPtr</A></h1><a name="_mhcNodeGetFieldPtr">
</A><p><a name="_mhcNodeGetFieldPtr"><i>Returns pointer to field.</i></A></p><a name="_mhcNodeGetFieldPtr">
</A><H2><a name="_mhcNodeGetFieldPtr">Syntax</A></H2><a name="_mhcNodeGetFieldPtr">
</A><blockquote><a name="_mhcNodeGetFieldPtr">
    </A><pre><a name="_mhcNodeGetFieldPtr">#include &lt;mhc/Node.h&gt;
_mhcNodeGetFieldPtr(node_ptr,f_id,idx)
</A></pre></blockquote><a name="_mhcNodeGetFieldPtr">
</A><H2><a name="_mhcNodeGetFieldPtr">Description</A></H2><a name="_mhcNodeGetFieldPtr">
  Returns pointer to field.

</A><hr>
<a name="_mhcNodeBind">
</A><h1><a name="_mhcNodeBind">_mhcNodeBind</A></h1><a name="_mhcNodeBind">
</A><p><a name="_mhcNodeBind"><i>Links node to scene.</i></A></p><a name="_mhcNodeBind">
</A><H2><a name="_mhcNodeBind">Syntax</A></H2><a name="_mhcNodeBind">
</A><blockquote><a name="_mhcNodeBind">
    </A><pre><a name="_mhcNodeBind">#include &lt;mhc/Node.h&gt;
_mhcNodeBind(node_ptr,module_ptr,scene_ptr)
</A></pre></blockquote><a name="_mhcNodeBind">
</A><H2><a name="_mhcNodeBind">Description</A></H2><a name="_mhcNodeBind">
  Links node to scene.

</A><hr>
<a name="_mhcNodeDestroy">
</A><h1><a name="_mhcNodeDestroy">_mhcNodeDestroy</A></h1><a name="_mhcNodeDestroy">
</A><p><a name="_mhcNodeDestroy"><i>Destroys node</i></A></p><a name="_mhcNodeDestroy">
</A><H2><a name="_mhcNodeDestroy">Syntax</A></H2><a name="_mhcNodeDestroy">
</A><blockquote><a name="_mhcNodeDestroy">
    </A><pre><a name="_mhcNodeDestroy">#include &lt;mhc/Node.h&gt;
_mhcNodeDestroy(node_ptr)
</A></pre></blockquote><a name="_mhcNodeDestroy">
</A><H2><a name="_mhcNodeDestroy">Description</A></H2><a name="_mhcNodeDestroy">
  Destroys node

</A><hr>
<h1><a name="_mhcNodeDestroy">Structure</A></h1><hr>
<hr>
<a name="MhcNode">
</A><h1><a name="MhcNode">MhcNode</A></h1><a name="MhcNode">
</A><blockquote><pre><a name="MhcNode">#include &lt;mhc/Node.h&gt;
typedef struct _MhcNode
{
    struct _MhcNode             *next_ptr;
    struct _MhcNode             *prev_ptr;
    u32                         type;
    char                        *name;
    u8                          flags;
    u8                          group_index; /* Sets only notes 
                                                 dependent on camera */
    u8                          unresolve_count;
    u8                          input_count;
    struct _MhcReference        *input_head_ptr;
    struct _MhcReference        *output_head_ptr;
    MhcInstanceList             instance_list;
    MhcNodeEvalFunc             evaluate;
    MhcNodeBindFunc             bind;
    MhcNodeGetFieldPtrFunc      get_field_ptr;
    MhcNodeDestroyFunc          destroy;
} MhcNode;
</A></pre></blockquote><a name="MhcNode">
</A><H2><a name="MhcNode">See Also</A></H2><a name="MhcNode">
</A><a href="mhcref.htm#MhcReference">MhcReference</a><a name="MhcNode">
<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
  </A></BODY>
</HTML>
