<HTML>
<HEAD>
<TITLE>misinput</TITLE>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../../../mobile/allman.css">
<!-- Editor's Notes: 9/22/1999 Ron Daring -->
</HEAD>
  <BODY bgcolor="#FFFFFF">
<h1>Function</h1>
<hr>
<a name="misInputInit">
</A>
<h1><a name="misInputInit">misInputInit</A></h1>
<a name="misInputInit">
</A>
<p><a name="misInputInit"><i>Initializes</i> <TT>MisInput</TT></A></p>
<a name="misInputInit">
</A>
<H2><a name="misInputInit">Syntax</A></H2>
<a name="misInputInit">
</A>
<blockquote><a name="misInputInit">
    </A>
<pre><a name="misInputInit">#include &lt;mis/Input.h&gt;
void misInputInit( MisInput *input_ptr )
</A></pre></blockquote>
<a name="misInputInit">
</A>
<H2><a name="misInputInit">Description</A></H2>
<a name="misInputInit">
  Initializes <TT>MisInput</TT>
</A>
<H2><a name="misInputInit">See Also</A></H2>
<a name="misInputInit">
</A><a href="misinput.htm#MisInput">MisInput</a><a name="misInputInit">

</A>
<hr>

<a name="misInputRead">
</A>
<h1><a name="misInputRead">misInputRead</A></h1>
<a name="misInputRead">
</A>
<p><a name="misInputRead"><i>Reads only the number of bytes specified by</i> <TT>byte_count</TT> <i>from</i> <TT>MisInput</TT> <i>to</i> <TT>buffer_ptr</TT></A></p>
<a name="misInputRead">
</A>
<H2><a name="misInputRead">Syntax</A></H2>
<a name="misInputRead">
</A>
<blockquote><a name="misInputRead">
    </A>
<pre><a name="misInputRead">#include &lt;mis/Input.h&gt;
u32 misInputRead( MisInput *input_ptr, const u32 byte_count,
                  void *buffer_ptr )
</A></pre></blockquote>
<a name="misInputRead">
</A>
<H2><a name="misInputRead">Description</A></H2>
<a name="misInputRead">
  Reads only the number of bytes specified by <TT>byte_count</TT> from <TT>misInput</TT> to <TT>buffer_ptr</TT>.  If an error occurs
  during this operation, the read stops at that point.  The number of bytes actually read will be returned.

</A>
<hr>

<a name="misInputGetSChar">
</A>
<h1><a name="misInputGetSChar">misInputGetSChar</A></h1>
<a name="misInputGetSChar">
</A>
<p><a name="misInputGetSChar"><i>Reads 1 byte from</i> <TT>MisInput</TT> <i>and returns it as</i> <TT>s8</TT></A></p>
<a name="misInputGetSChar">
</A>
<H2><a name="misInputGetSChar">Syntax</A></H2>
<a name="misInputGetSChar">
</A>
<blockquote><a name="misInputGetSChar">
    </A>
<pre><a name="misInputGetSChar">#include &lt;mis/Input.h&gt;
s8 misInputGetSChar( MisInput *input_ptr )
</A></pre></blockquote>
<a name="misInputGetSChar">
</A>
<H2><a name="misInputGetSChar">Description</A></H2>
<a name="misInputGetSChar">
  Reads 1 byte from <TT>MisInput</TT> and returns it as <TT>s8</TT>.  If an error occurs during this operation, the read stops 
  at that point and the return value is unspecified. 

</A>
<hr>

<a name="misInputGetUChar">
</A>
<h1><a name="misInputGetUChar">misInputGetUChar</A></h1>
<a name="misInputGetUChar">
</A>
<p><a name="misInputGetUChar"><i>Reads 1 byte from</i> <TT>MisInput</TT> <i>and returns it as</i> <TT>u8</TT></A></p>
<a name="misInputGetUChar">
</A>
<H2><a name="misInputGetUChar">Syntax</A></H2>
<a name="misInputGetUChar">
</A>
<blockquote><a name="misInputGetUChar">
    </A>
<pre><a name="misInputGetUChar">#include &lt;mis/Input.h&gt;
u8 misInputGetUChar( MisInput *input_ptr )
</A></pre></blockquote>
<a name="misInputGetUChar">
</A>
<H2><a name="misInputGetUChar">Description</A></H2>
<a name="misInputGetUChar">
  Reads 1 byte from <TT>MisInput</TT> and returns it as <TT>u8</TT>.  If an error occurs during this operation, the read stops 
  at that point and the return value is unspecified.

</A>
<hr>

<a name="misInputGetSShort">
</A>
<h1><a name="misInputGetSShort">misInputGetSShort</A></h1>
<a name="misInputGetSShort">
</A>
<p><a name="misInputGetSShort"><i>Reads 2 bytes from</i> <TT>MisInput</TT> <i>and returns it as</i> <TT>s16</TT></A></p>
<a name="misInputGetSShort">
</A>
<H2><a name="misInputGetSShort">Syntax</A></H2>
<a name="misInputGetSShort">
</A>
<blockquote><a name="misInputGetSShort">
    </A>
<pre><a name="misInputGetSShort">#include &lt;mis/Input.h&gt;
s16 misInputGetSShort( MisInput *input_ptr )
</A></pre></blockquote>
<a name="misInputGetSShort">
</A>
<H2><a name="misInputGetSShort">Description</A></H2>
<a name="misInputGetSShort">
  Reads 2 bytes from <TT>MisInput</TT> and returns it as <TT>s16</TT>.  If an error occurs during this operation, the read 
  stops at that point and the return value is unspecified.

</A>
<hr>

<a name="misInputGetUShort">
</A>
<h1><a name="misInputGetUShort">misInputGetUShort</A></h1>
<a name="misInputGetUShort">
</A>
<p><a name="misInputGetUShort"><i>Reads 2 bytes from</i> <TT>MisInput</TT> <i>and returns it as</i> <TT>u16</TT></A></p>
<a name="misInputGetUShort">
</A>
<H2><a name="misInputGetUShort">Syntax</A></H2>
<a name="misInputGetUShort">
</A>
<blockquote><a name="misInputGetUShort">
    </A>
<pre><a name="misInputGetUShort">#include &lt;mis/Input.h&gt;
u16 misInputGetUShort( MisInput *input_ptr )
</A></pre></blockquote>
<a name="misInputGetUShort">
</A>
<H2><a name="misInputGetUShort">Description</A></H2>
<a name="misInputGetUShort">
  Reads 2 bytes from <TT>MisInput</TT> and returns it as <TT>u16</TT>.  If an error occurs during this operation, the read 
  stops at that point and the return value is unspecified. 

</A>
<hr>

<a name="misInputGetSLong">
</A>
<h1><a name="misInputGetSLong">misInputGetSLong</A></h1>
<a name="misInputGetSLong">
</A>
<p><a name="misInputGetSLong"><i>Reads 4 bytes from</i> <TT>MisInput</TT> <i>and returns it as</i> <TT>s32</TT></A></p>
<a name="misInputGetSLong">
</A>
<H2><a name="misInputGetSLong">Syntax</A></H2>
<a name="misInputGetSLong">
</A>
<blockquote><a name="misInputGetSLong">
    </A>
<pre><a name="misInputGetSLong">#include &lt;mis/Input.h&gt;
s32 misInputGetSLong( MisInput *input_ptr )
</A></pre></blockquote>
<a name="misInputGetSLong">
</A>
<H2><a name="misInputGetSLong">Description</A></H2>
<a name="misInputGetSLong">
  Reads 4 bytes from <TT>MisInput</TT> and returns it as <TT>s32</TT>.  If an error occurs during this operation, the read 
  stops at that point and the return value is unspecified.

</A>
<hr>

<a name="misInputGetULong">
</A>
<h1><a name="misInputGetULong">misInputGetULong</A></h1>
<a name="misInputGetULong">
</A>
<p><a name="misInputGetULong"><i>Reads 4 bytes from</i> <TT>MisInput</TT> <i>and returns it as</i> <TT>u32</TT></A></p>
<a name="misInputGetULong">
</A>
<H2><a name="misInputGetULong">Syntax</A></H2>
<a name="misInputGetULong">
</A>
<blockquote><a name="misInputGetULong">
    </A>
<pre><a name="misInputGetULong">#include &lt;mis/Input.h&gt;
u32 misInputGetULong( MisInput *input_ptr )
</A></pre></blockquote>
<a name="misInputGetULong">
</A>
<H2><a name="misInputGetULong">Description</A></H2>
<a name="misInputGetULong">
  Reads 4 bytes from <TT>misInput</TT> and returns it as <TT>u32</TT>.  If an error occurs during this operation, the read 
  stops at that point and the return value is unspecified.

</A>
<hr>

<a name="misInputGetFloat">
</A>
<h1><a name="misInputGetFloat">misInputGetFloat</A></h1>
<a name="misInputGetFloat">
</A>
<p><a name="misInputGetFloat"><i>Reads 4 bytes from</i> <TT>MisInput</TT> <i>and returns it as float</i></A></p>
<a name="misInputGetFloat">
</A>
<H2><a name="misInputGetFloat">Syntax</A></H2>
<a name="misInputGetFloat">
</A>
<blockquote><a name="misInputGetFloat">
    </A>
<pre><a name="misInputGetFloat">#include &lt;mis/Input.h&gt;
float misInputGetFloat( MisInput *input_ptr )
</A></pre></blockquote>
<a name="misInputGetFloat">
</A>
<H2><a name="misInputGetFloat">Description</A></H2>
<a name="misInputGetFloat">
  Reads 4 bytes from <TT>MisInput</TT> and returns it as float.  If an error occurs during this operation, the read 
  stops at that point and the return value is unspecified. 


</A>
<hr>
<h1><a name="misInputGetFloat">Macro</A></h1><hr>
<hr>

<a name="_misInputGet">
</A>
<h1><a name="_misInputGet">_misInputGet</A></h1>
<a name="_misInputGet">
</A>
<p><a name="_misInputGet"><i>Gets and returns 1 byte from</i> <TT>MisInput</TT></A></p>
<a name="_misInputGet">
</A>
<H2><a name="_misInputGet">Syntax</A></H2>
<a name="_misInputGet">
</A>
<blockquote><a name="_misInputGet">
    </A>
<pre><a name="_misInputGet">#include &lt;mis/Input.h&gt;
_misInputGet( MisInput *input_ptr )
</A></pre></blockquote>
<a name="_misInputGet">
</A>
<H2><a name="_misInputGet">Description</A></H2>
<a name="_misInputGet">
  Gets and returns 1 byte from <TT>misInput</TT>.  If an error occurs, <TT>MIS_INPUT_GET_ERROR</TT> (this value will 
  always be negative) is returned. 

</A>
<hr>

<a name="_misInputClose">
</A>
<h1><a name="_misInputClose">_misInputClose</A></h1>
<a name="_misInputClose">
</A>
<p><a name="_misInputClose"><i>Closes an open</i> <TT>MisInput</TT></A></p>
<a name="_misInputClose">
</A>
<H2><a name="_misInputClose">Syntax</A></H2>
<a name="_misInputClose">
</A>
<blockquote><a name="_misInputClose">
    </A>
<pre><a name="_misInputClose">#include &lt;mis/Input.h&gt;
_misInputClose( MisInput *input_ptr )
</A></pre></blockquote>
<a name="_misInputClose">
</A>
<H2><a name="_misInputClose">Description</A></H2>
<a name="_misInputClose">
  Closes an open <TT>misInput</TT>.  If successful, a 0 [zero] is returned. If it fails, a value other than 0 [zero] is 
  returned. 

</A>
<hr>

<a name="_misInputDestroy">
</A>
<h1><a name="_misInputDestroy">_misInputDestroy</A></h1>
<a name="_misInputDestroy">
</A>
<p><a name="_misInputDestroy"><i>Destroys</i> <TT>MisInput</TT></A></p>
<a name="_misInputDestroy">
</A>
<H2><a name="_misInputDestroy">Syntax</A></H2>
<a name="_misInputDestroy">
</A>
<blockquote><a name="_misInputDestroy">
    </A>
<pre><a name="_misInputDestroy">#include &lt;mis/Input.h&gt;
_misInputDestroy( MisInput *input_ptr )
</A></pre></blockquote>
<a name="_misInputDestroy">
</A>
<H2><a name="_misInputDestroy">Description</A></H2>
<a name="_misInputDestroy">
  Destroys <TT>MisInput</TT>.  This can also be used on the objects of a class derived from <TT>MisInput</TT>. 

</A>
<hr>

<a name="_misInputSetStatus">
</A>
<h1><a name="_misInputSetStatus">_misInputSetStatus</A></h1>
<a name="_misInputSetStatus">
</A>
<p><a name="_misInputSetStatus"><i>Sets the status of</i> <TT>MisInput</TT></A></p>
<a name="_misInputSetStatus">
</A>
<H2><a name="_misInputSetStatus">Syntax</A></H2>
<a name="_misInputSetStatus">
</A>
<blockquote><a name="_misInputSetStatus">
    </A>
<pre><a name="_misInputSetStatus">#include &lt;mis/Input.h&gt;
_misInputSetStatus( MisInput *input_ptr, int status )
</A></pre></blockquote>
<a name="_misInputSetStatus">
</A>
<H2><a name="_misInputSetStatus">Description</A></H2>
<a name="_misInputSetStatus">
  Sets the status of <TT>MisInput</TT>. This must not be used by normal applications.

</A>
<hr>

<a name="_misInputClearStatus">
</A>
<h1><a name="_misInputClearStatus">_misInputClearStatus</A></h1>
<a name="_misInputClearStatus">
</A>
<p><a name="_misInputClearStatus"><i>Clears the status of</i> <TT>MisInput</TT></A></p>
<a name="_misInputClearStatus">
</A>
<H2><a name="_misInputClearStatus">Syntax</A></H2>
<a name="_misInputClearStatus">
</A>
<blockquote><a name="_misInputClearStatus">
    </A>
<pre><a name="_misInputClearStatus">#include &lt;mis/Input.h&gt;
_misInputClearStatus( MisInput *input_ptr, int status )
</A></pre></blockquote>
<a name="_misInputClearStatus">
</A>
<H2><a name="_misInputClearStatus">Description</A></H2>
<a name="_misInputClearStatus">
  Clears the status of <TT>MisInput</TT>.  This must not be used by normal applications.

</A>
<hr>

<a name="_misInputIsOpened">
</A>
<h1><a name="_misInputIsOpened">_misInputIsOpened</A></h1>
<a name="_misInputIsOpened">
</A>
<p><a name="_misInputIsOpened"><i>Returns a value other than 0 [zero] if</i> <TT>MisInput</TT> <i>is open</i></A></p>
<a name="_misInputIsOpened">
</A>
<H2><a name="_misInputIsOpened">Syntax</A></H2>
<a name="_misInputIsOpened">
</A>
<blockquote><a name="_misInputIsOpened">
    </A>
<pre><a name="_misInputIsOpened">#include &lt;mis/Input.h&gt;
_misInputIsOpened( MisInput *input_ptr )
</A></pre></blockquote>
<a name="_misInputIsOpened">
</A>
<H2><a name="_misInputIsOpened">Description</A></H2>
<a name="_misInputIsOpened">
  Returns a value other than 0 [zero] if <TT>MisInput</TT> is open.

</A>
<hr>

<a name="_misInputIsEof">
</A>
<h1><a name="_misInputIsEof">_misInputIsEof</A></h1>
<a name="_misInputIsEof">
</A>
<p><a name="_misInputIsEof"><i>Returns a value other than 0 [zero] if</i> <TT>MisInput</TT> <i>has reached EOF</i></A></p>
<a name="_misInputIsEof">
</A>
<H2><a name="_misInputIsEof">Syntax</A></H2>
<a name="_misInputIsEof">
</A>
<blockquote><a name="_misInputIsEof">
    </A>
<pre><a name="_misInputIsEof">#include &lt;mis/Input.h&gt;
_misInputIsEof( MisInput *input_ptr )
</A></pre></blockquote>
<a name="_misInputIsEof">
</A>
<H2><a name="_misInputIsEof">Description</A></H2>
<a name="_misInputIsEof">
  Returns a value other than 0 [zero] if <TT>MisInput</TT> has reached EOF.

</A>
<hr>

<a name="_misInputIsFailure">
</A>
<h1><a name="_misInputIsFailure">_misInputIsFailure</A></h1>
<a name="_misInputIsFailure">
</A>
<p><a name="_misInputIsFailure"><i>Returns a value other than 0 [zero] if an error other than EOF has occurred with</i> <TT>MisInput</TT></A></p>
<a name="_misInputIsFailure">
</A>
<H2><a name="_misInputIsFailure">Syntax</A></H2>
<a name="_misInputIsFailure">
</A>
<blockquote><a name="_misInputIsFailure">
    </A>
<pre><a name="_misInputIsFailure">#include &lt;mis/Input.h&gt;
_misInputIsFailure( MisInput *input_ptr )
</A></pre></blockquote>
<a name="_misInputIsFailure">
</A>
<H2><a name="_misInputIsFailure">Description</A></H2>
<a name="_misInputIsFailure">
  Returns a value other than 0 [zero] if an error other than EOF has occurred with <TT>MisInput</TT>

</A>
<hr>

<a name="_misInputGetErrorStatus">
</A>
<h1><a name="_misInputGetErrorStatus">_misInputGetErrorStatus</A></h1>
<a name="_misInputGetErrorStatus">
</A>
<p><a name="_misInputGetErrorStatus"><i>Returns an error status bit</i></A></p>
<a name="_misInputGetErrorStatus">
</A>
<H2><a name="_misInputGetErrorStatus">Syntax</A></H2>
<a name="_misInputGetErrorStatus">
</A>
<blockquote><a name="_misInputGetErrorStatus">
</A>
<pre><a name="_misInputGetErrorStatus">#include &lt;mis/Input.h&gt;
_misInputGetErrorStatus(input_ptr)
</A></pre></blockquote>
<a name="_misInputGetErrorStatus">
</A>
<H2><a name="_misInputGetErrorStatus">Description</A></H2>
<a name="_misInputGetErrorStatus">
  Returns an error status bit. Currently, <TT>MIS_INPUT_STATUS_EOF_BIT</TT> and
  <TT>MIS_INPUT_STATUS_FAILURE_BIT</TT> are available.

</A>
<hr>
<h1><a name="_misInputGetErrorStatus">Structure</A></h1><hr>
<hr>

<a name="MisInput">
</A>
<h1><a name="MisInput">MisInput</A></h1><blockquote><a name="MisInput">
</A>
<pre><a name="MisInput">#include &lt;mis/Input.h&gt;

typedef struct _MisInput
{
    u8                  status;
    MisInputGetFunc     get;
    MisInputCloseFunc   close;
    MisInputDestroyFunc destroy;
} MisInput;
</A></pre></blockquote>
<a name="MisInput">
<br><br><br><br><br><br><br><br><br><br>
<br><br><br><br><br><br><br><br><br><br>
<br><br><br><br><br><br><br><br><br><br>
<br><br><br><br><br><br><br><br><br><br>
  </A></BODY>
</HTML>
