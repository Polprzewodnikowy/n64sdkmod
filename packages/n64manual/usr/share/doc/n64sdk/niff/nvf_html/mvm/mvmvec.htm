<HTML>
<HEAD>
<TITLE>mvmvec</TITLE>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../../../mobile/allman.css">
<!-- Editor's Notes: 9/23/1999 Ron Daring -->
</HEAD>
  <BODY bgcolor="#FFFFFF">
<h1>mvmVector</h1>
<p><i>Defines the calculations pertaining to vectors</i></p>
<pre>
#include &lt;mvm/Vector.h&gt;

Types
* float type      MvmVector2f
  char type       MvmVector2sc, MvmVector2uc
  short type      MvmVector2ss, MvmVector2us
  long type       MvmVector2sl, MvmVector2ul
  2-dimensional vector. 

* float type      MvmVector3f
  char type       MvmVector3sc, MvmVector3uc
  short type      MvmVector3ss, MvmVector3us
  long type       MvmVector3sl, MvmVector3ul
  3-dimensional vector.

* float type      MvmVector4f
  char type       MvmVector4sc, MvmVector4uc
  short type      MvmVector4ss, MvmVector4us
  long type       MvmVector4sl, MvmVector4ul
  4-dimensional vector.

Macro
* _mvmVector2fCopy( dest, src )
  Copies mvmVector2f from src to dest

* _mvmVector3fCopy( dest, src )
  Copies mvmVector3f from src to dest

* _mvmVector4fCopy( dest, src )
  Copies mvmVector4f from src to dest

* _mvmVector2fMag( dest, k, src )
  Multiplies src by k

* _mvmVector3fMag( dest, k, src )
  Multiplies src by k

* _mvmVector4fMag( dest, k, src )
  Multiplies src by k

* _mvmVector2fAdd( dest, a, b )
  Stores a+b in dest

* _mvmVector3fAdd( dest, src )
  Stores a+b in dest

* _mvmVector4fAdd( dest, src )
  Stores a+b in dest

* _mvmVector2fSub( dest, a, b )
  Stores a-b in dest

* _mvmVector3fSub( dest, src )
  Stores a-b in dest

* _mvmVector4fSub( dest, src )
  Stores a-b in dest

* _mvmVector2fScale( dest, a, b )
  Stores the product of a and b for each element in dest

* _mvmVector3fScale( dest, a, b )
  Stores the product of a and b for each element in dest

* _mvmVector4fScale( dest, a, b )
  Stores the product of a and b for each element in dest

* _mvmVector2fDot( a, b )
  Returns the inner product of a and b

* _mvmVector3fDot( a, b )
  Returns the inner product of a and b

* _mvmVector4fDot( a, b )
  Returns the inner product of a and b

* _mvmVector3fCross( dest, a, b )
  Stores the outer product of a and b in dest

* _mvmVector2fTransform22f( dest, v, m )
  Stores the 2-dimensional vector v in dest, 
  converted into a 2x2 matrix m

* _mvmVector3fTransform33f( dest, v, m )
  Stores the 3-dimensional vector v in dest, 
  converted into a 3x3 matrix m

* _mvmVector3fTransform33fp( dest, v, m, p )
  Stores the 3-dimensional vector v in dest, 
  converted into a 3x3 matrix m and shifted parallel by p

* _mvmVector4fTransform44f( dest, v, m )
  Stores the 4-dimensional vector v in dest, 
  converted into a 4x4 matrix m

Function
* mvmVector2fCopy( dest, src )
  Copies mvmVector2f from src to dest

* mvmVector3fCopy( dest, src )
  Copies mvmVector3f from src to dest

* mvmVector4fCopy( dest, src )
  Copies mvmVector4f from src to dest

* mvmVector2fMag( dest, k, src )
  Multiplies src by k

* mvmVector3fMag( dest, k, src )
  Multiplies src by k

* mvmVector4fMag( dest, k, src )
  Multiplies src by k

* mvmVector2fAdd( dest, a, b )
  Stores a+b in dest

* mvmVector3fAdd( dest, src )
  Stores a+b in dest

* mvmVector4fAdd( dest, src )
  Stores a+b in dest

* mvmVector2fSub( dest, a, b )
  Stores a-b in dest

* mvmVector3fSub( dest, src )
  Stores a-b in dest

* mvmVector4fSub( dest, src )
  Stores a-b in dest

* mvmVector2fScale( dest, a, b )
  Stores the product of a and b for each element in dest

* mvmVector3fScale( dest, a, b )
  Stores the product of a and b for each element in dest

* mvmVector4fScale( dest, a, b )
  Stores the product of a and b for each element in dest

* mvmVector2fDot( a, b )
  Returns the inner product of a and b

* mvmVector3fDot( a, b )
  Returns the inner product of a and b

* mvmVector4fDot( a, b )
  Returns the inner product of a and b

* mvmVector3fCross( dest, a, b )
  Stores the outer product of a and b in dest

* mvmVector2fTransform22f( dest, v, m )
  Stores the 2-dimensional vector v in dest converted 
  into a 2x2 matrix m

* mvmVector3fTransform33f( dest, v, m )
  Stores the 3-dimensional vector v in dest converted 
  into a 3x3 matrix m

* mvmVector3fTransform33fp( dest, v, m, p )
  Stores the 3-dimensional vector v in dest converted 
  into a 3x3 matrix m and shifted parallel by p

* mvmVector4fTransform44f( dest, v, m )
  Stores the 4-dimensional vector v in dest converted 
  into a 4x4 matrix m

</pre>

  </BODY>
</HTML>
