
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<link rel=stylesheet type="text/css" href="../../../mobile/allman.css">
<!--
Editors Notes:
  PWC- updated formatting
-->
</head>

<body>

<p><a name="16 segment base address"><b>16 segment base address</b></a><br>A physical address obtained from the segment address that acts as a type of reference point.  By adding a 0 to the end of the segment address to make a 5-digit address, you can specify an arbitrary physical address every 16 bytes as a segment bases.</p>

<table border="2" width="400">
  <tr>
    <td><p align="center">segment address</td>
    <td></td>
    <td><p align="center">segment base</td>
    <td><p align="center">physical address</td>
  </tr>
  <tr>
    <td><p align="center">0000H</td>
    <td><p align="center">--></td>
    <td><p align="center">00000H</td>
    <td><p align="center">00000H</td>
  </tr>
  <tr>
    <td><p align="center">0001H</td>
    <td><p align="center">--></td>
    <td><p align="center">00010H</td>
    <td><p align="center">00010H</td>
  </tr>
  <tr>
    <td><p align="center"> : </td>
    <td></td>
    <td><p align="center"> : </td>
    <td><p align="center"> : </td>
  </tr>
</table>

<p><a name="2-way set associative"><b>2-way set associative</b></a><br>A system used to split the cache memory into groups and place the data currently at a specific address in main memory into the "associated" position in the split-out area of the cache.  If the cache is split in two, the system is called "2-way set associative." By using a 2-way set associative system, you can change the contents of one cache while keeping the contents of the other cache intact.</p>

<p><a name="64-bit boundary alignment"><b>64-bit boundary alignment</b></a><br>A format in which data is partitioned every 64 bits from the low address of memory.</p>

<p><a name="8-byte boundary"><b>8-byte boundary
</b></a><br>A format in which memory access is partitioned into units of 8 bytes.</p>

<p><a name="abstract layer"><b>abstract layer</b></a><br></p>

<p><a name="active page register"><b>active page register </b></a><br>The register that specifies the page position of each bank of RDRAM. The banks of RDRAM are separated into four banks of 1 megabyte each. When using the framebuffer and the Z-Buffer, you use the active page register to store the buffers in separate memory banks. You should do this for faster execution speed.</p>

<p><a name="add-on RAM pak"><b>add-on RAM pak</b></a><br>Add-on RAM is RAM that expands memory storage capacity.  Here it refers to the Controller Pak. </p>

<p><a name="address conversion buffer"><b>address conversion buffer</b></a><br>This buffer holds the address conversion table containing the virtual to physical address conversion information. You can use it to convert from the virtual to physical addresses at a high rate of speed. Usually, address conversion buffer is called TLB (Translation Lookaside Buffer).</p>

<p><a name="address space identifier"><b>address space identifier</b></a><br>The 8-bit value used for expanding the virtual address when you provide the virtual addressing through the TLB (Translation Lookaside Buffer).</p>

<p><a name="agent"><b>agent</b></a><br>
A software program that acts independently to perform some task on behalf of the user.  The software acts as an agent of the user, conducting the task according to the user's intentions even without detailed instructions.</p>

<p><a name="AI"><b>AI</b></a><br>
= Audio Interface.  Reads audio data from memory and generates stereo audio signals for output to the audio DAC.</p>

<p><a name="alignment rule"><b>alignment rule</b></a><br>The alignment shows the relationship between the information stored in memory and the memory boundary. The N64 system has a rule that says you must align the memory area to the 16-byte boundary so that it becomes a multiple of a cache line.</p>

<p><a name="alpha dithering"><b>alpha dithering</b></a><br>When the pixel alpha value is larger than a random dither value, the frame buffer is provisionally overwritten.  By doing this, gradations can be placed on surfaces and particle effects can be realized.</p>

<p><a name="alpha pattern"><b>alpha pattern</b></a><br>Alpha value</p>

<p><a name="API"><b>API</b></a><br>
= Application Programming Interface.  The programming interface composed of functions, commands, and utilities that the operating system supplies for the application program.</p>

<p><a name="application programming interface"><b>application programming interface</b></a><br> --> <a href="#API">API</a></p>

<p><a name="application thread"><b>application thread
</b></a><br></p>

<p><a name="array"><b>array</b></a><br></p>

<p><a name="aspect ratio"><b>aspect ratio</b></a><br>The width-to-height ratio of a television screen.</p>

<p><a name="asynchronous I/O"><b>asynchronous I/O</b></a><br>I/O that operates with no relation to the action of the thread requesting the I/O.</p>

<p><a name="atomic primitive mode"><b>atomic primitive mode</b></a><br>The mode you can use to avoid the span buffer coherence problem. But this mode seriously reduces the fill-rate.</p>

<p><a name="audio interface"><b>audio interface
</b></a><br> --> <a href="#AI">AI</a></p>

<p><a name="audio task"><b>audio task</b></a><br>
</p>

<p><a name="bandwidth"><b>bandwidth</b></a><br>
Refers to the volume of data that can be transferred per unit of time.</p>

<p><a name="base address"><b>base address</b></a><br></p>

<p><a name="base image"><b>base image</b></a><br>
</p>

<p><a name="base pointer"><b>base pointer</b></a><br></p>

<p><a name="big-endian, little-endian"><b>big-endian, little-endian</b></a><br>Two different formats for storing data in memory space.  The example below shows the two ways the 32 bits of data 0xdeadbeef are stored in memory space.  In the little-endian method, data is stored in order from the least significant byte.  Conversely, in the big-endian method, data is stored in order from the most significant byte.<br><img src="../gif/endian.gif"></p>

<p><a name="bit packing"><b>bit packing</b></a><br>The process of packing bits into a form that fits some format.</p>

<p><a name="BL"><b>BL</b></a><br>
= Blender.  Blends pixels that have been processed in the pipeline with pixels in the frame buffer.  Part of the anti-aliasing process on polygon edges, and can also be executed in 2 cycle mode for fog.</p>

<p><a name="block state"><b>block state</b></a><br>wait state.</p>

<p><a name="boot"><b>boot</b></a><br>
The process used to execute a program located in an external memory device.  It involves initializing the system at startup and loading the program into main memory.</p>

<p><a name="boot microcode"><b>boot microcode</b>
</a><br></p>

<p><a name="boot segment"><b>boot segment</b>
</a><br></p>

<p><a name="boot sequence"><b>boot sequence</b></a><br></p>

<p><a name="boundary"><b>boundary</b></a><br>
Boundary</p>

<p><a name="boundary alignment"><b>boundary alignment</b>
</a><br> --> <a href="#64-bit boundary alignment">64-bit boundary alignment</a></p>

<p><a name="Bss"><b>Bss</b></a><br>
= Block Started by Symbol. A data area where initial values are not defined.  Thus, in order to use the Bss section, you must clear the initial values (make them 0).  When a CAUSE register interrupt occurs, the cause of the interrupt is stored in this register in order to notify the system.</p>

<p><a name="bucket sort"><b>bucket sort</b></a><br>A sorting method that divides numeric values, which you want to sort, into buckets and then does all sorting in the buckets.  If the numeric values are evenly distributed, the process will be extremely fast.</p>

<p><a name="buffer"><b>buffer</b></a><br>
A memory space used for temporary data storage to accommodate for differences in transfer speeds when transferring data between systems.</p>

<p><a name="cache align"><b>cache align</b></a><br>The amount of data that can be fetched into cache from main memory is determined by the cache size.  Cache align is the process by which the units for access to memory space are aligned with this cache size.</p>

<p><a name="cache coherent"><b>cache coherent</b></a><br>The condition in which is conformity is maintained between the contents of cache and the contents of memory.</p>

<p><a name="cache line"><b>cache line</b></a><br>The cache size.</p>

<p><a name="calling process"><b>calling process</b></a><br>Calling the next process from the current state and executing it the next time after that.</p>

<p><a name="cartridge interrupt"><b>cartridge interrupt
</b></a><br></p>

<p><a name="CC"><b>CC</b></a><br>= Color Combiner.  This unit combines texels generated by the TX with step RGBA pixels generated by the RS.  It takes two color values from each color source and linearly interpolates them.</p>

<p><a name="cold reset"><b>cold reset</b></a><br>
One way of resetting the VR4000.  When the ColdReset signal is made active while the processor is operating, all clocks are restarted.  At this time, memory is cleared.</p>

<p><a name="color combiner"><b>color combiner</b></a><br> --> <a href="#CC">CC</a></p>

<p><a name="command dispatcher"><b>command dispatcher
</b></a><br>The part that manages the operation of commands.</p>

<p><a name="command parser"><b>command parser</b></a><br>The part that analyzes commands.</p>

<p><a name="common vector"><b>common vector</b></a><br></p>

<p><a name="communication packet log file"><b>communication packet log file</b></a><br>In the N64, data is transmitted between hidden threads in packets.  This log file contains historical information about these packets.</p>

<p><a name="company code"><b>company code</b></a><br></p>

<p><a name="compare register"><b>compare register</b></a><br></p>

<p><a name="compile options"><b>compile options
</b></a><br>Rather than compiling with the default settings, these options can be used to indicate additions or changes to functions.</p>

<p><a name="Cont"><b>Cont</b></a><br></p>

<p><a name="context"><b>context</b></a><br>
(1) The address and other information about the cause of a CPU exception. (2) Information managed by the OS about thread states and register values when the right of execution has been lost. "thread context" , "context switch".</p>

<p><a name="controller bros."><b>controller bros.</b></a><br>The name for all the different-colored N64 Controllers.  The current family includes six colors: gray, black, green, red, yellow, blue.</p>

<p><a name="controller interface"><b>controller interface </b></a><br>Serial interface.</p>

<p><a name="controller pak"><b>controller pak
</b></a><br>The external memory device that fits into the slot on the backside of the N64 Controller.  The current device has a capacity of 256 Kbit and can easily used to exchange data.</p>

<p><a name="controller pak file system"><b>controller pak file system</b></a><br>The management system for the memory area created by the library so the Controller Pak can be shared among different applications.</p>

<p><a name="controller pak menu"><b>controller pak menu
</b></a><br>The operation menu for the Controller Pak, which is normally started up when the power to the NINTENDO 64 is turned on while pressing the START button.</p>

<p><a name="control register"><b>control register</b></a><br>The control status register (FCR31), one of the registers in the FPU in the VR4300.  This is generally the register for controlling the hardware.</p>

<p><a name="core dump"><b>core dump</b></a><br>
An error that arises when the system tries to read an address that does not exist.</p>

<p><a name="core file"><b>core file</b></a><br>
The file containing debug information that is created when a program ends abnormally.</p>

<p><a name="core rendering routine"><b>core rendering routine</b></a><br></p>

<p><a name="counter interrupt"><b>counter interrupt</b>
</a><br>The interrupt that notifies when the internal counter has reached some final value.</p>

<p><a name="count register cycle number"><b>count register cycle number</b></a><br></p>

<p><a name="CPU"><b>CPU</b></a><br>
Central Processing Unit.</p>

<p><a name="CPU count register"><b>CPU count register
</b></a><br></p>

<p><a name="CPU exception"><b>CPU exception</b></a><br></p>

<p><a name="CPU instruction cache"><b>CPU instruction cache</b></a><br></p>

<p><a name="CPU interrupt"><b>CPU interrupt</b></a><br></p>

<p><a name="CPU thread"><b>CPU thread</b></a><br>
</p>

<p><a name="critical region"><b>critical region</b></a><br>Fatal region</p>

<p><a name="DAC"><b>DAC</b></a><br>
= Digital to Analog Converter</p>

<p><a name="data cache line size"><b>data cache line size
</b></a><br>The minimum unit of information that can be fetched into cache from main memory.</p>

<p><a name="data memory"><b>data memory</b></a><br>--> <a href="#DMEM">DMEM</a></p>

<p><a name="dbx command"><b>dbx command</b></a><br>Source level debugger (dbx) command used in UNIX.  The N64 debugger (gvd) supports nearly all dbx commands.</p>

<p><a name="debugger ID"><b>debugger ID</b></a><br></p>

<p><a name="debug tracing"><b>debug tracing</b></a><br></p>

<p><a name="default state"><b>default state</b></a><br></p>

<p><a name="device dependent system interface"><b>device dependent system interface</b></a><br>The interface that is capable of only low-level (direct) operations, excluding all the functions like naming and buffering that are possible with the device-independent system interface.</p>

<p><a name="device driver"><b>device driver</b></a><br>A control program used for controlling the peripheral equipment connected to the computer.</p>

<p><a name="device independent system interface"><b>device independent system interface</b></a><br>The interface that has common I0 functions (protecting, blocking, and buffering) for various devices. You can operate it without knowing the details about the configuration of the device.</p>

<p><a name="device manager"><b>device manager</b>
</a><br>The N64 high-priority thread used for device control. After registering the event, event message queue and message, the device manager controls the execution of I/0 operations sequentially from the input command queue.</p>

<p><a name="direct I/O layer"><b>direct I/O layer</b>
</a><br></p>

<p><a name="direct mapping"><b>direct mapping</b></a><br></p>

<p><a name="disassemble"><b>disassemble</b></a><br>The action of converting a machine language program into assembler mnemonics.  This turns the hard-to-understand machine language program into something easier to grasp.  The opposite action is to assemble.</p>

<p><a name="dispatch"><b>dispatch</b></a><br>
A kind of multiprogramming control, in which the Scheduler allocates the right to use the CPU to the next process.</p>

<p><a name="display processor"><b>display processor</b>
</a><br> --> <a href="#DP">DP</a></p>

<p><a name="DMA"><b>DMA</b></a><br>= Direct Memory Access. Refers to direct data transfers between a device and main memory without intermediation by the CPU.  This boosts the efficiency of the CPU, since it can be doing other processes during the data transfer.</p>

<p><a name="DMA buffer"><b>DMA buffer</b></a><br>
</p>

<p><a name="DMA engine"><b>DMA engine</b></a><br>
</p>

<p><a name="DMA length register"><b>DMA length register</b></a><br></p>

<p><a name="DMA request"><b>DMA request</b></a><br
</p>

<p><a name="DMA transfer"><b>DMA transfer</b></a><br> --> <a href="#DMA">DMA</a></p>

<p><a name="DMEM"><b>DMEM</b></a><br>Data memory.
</p>

<p><a name="double wide gio bus"><b>double wide gio bus
</b></a><br></p>

<p><a name="DP"><b>DP</b></a><br> = Display Processor.</p>

<p><a name="DP command buffer"><b>DP command buffer</b></a><br>The buffer that stores the RDP display list.</p>

<p><a name="DRAM matrix stack"><b>DRAM matrix stack</b></a><br></p>

<p><a name="dram microcode"><b>dram microcode</b>
</a><br></p>

<p><a name="dual porting"><b>dual porting</b></a>
<br></p>

<p><a name="dual port interrupt"><b>dual port interrupt
</b></a><br></p>

<p><a name="dump"><b>dump</b></a><br>
The act of displaying or printing out the contents of programs and files in order to find problems in programs.</p>

<p><a name="element translation"><b>element translation
</b></a><br></p>

<p><a name="ELF object file"><b>ELF object file</b></a><br>ELF is short for Executable and Linking Format.  The ELF object file is the object file used for the creation of an ELF executable form file.  By linking this you can create an ELF execution file.</p>

<p><a name="encoder"><b>encoder</b></a><br>
A mechanism or circuit that encodes data.</p>

<p><a name="entry high register"><b>entry high register
</b></a><br>A readable and writable register used to gain access to the highest bit of the built-in TLB. It stores the address of the information that caused an exception if a TLB exception occurs.</p>

<p><a name="entry low 0 and 1 register"><b>entry low 0 and 1 register</b></a><br>A readable and writable register used to gain access to the lowest bit of the built-in TLB. The entry Lo registers hold both the even virtual pages (Lo-0) and the odd virtual pages (Lo-1).<br>
<img src="../gif/entry.gif"></p>

<p><a name="EPI routine"><b>EPI routine</b></a><br>EPI is short for Enhanced PI.  Refers to a PI function that can specify which device to access.  This enables support for not only conventional game paks, but also 64DD and other new devices.</p>

<p><a name="error PC"><b>error PC</b></a><br>
The exception program counter. It holds the virtual address value of the command that directly caused the exception or the virtual address value of the last branch or the jump command.</p>

<p><a name="event"><b>event</b></a><br>
The mechanism for managing the occurrence of interrupts and exceptions.  The occurrence and the end of interrupts and exceptions in the SP, DP, VI and AI are already defined in the N64 OS.</p>

<p><a name="event flag"><b>event flag</b></a><br>
A flag that indicates the occurrence or the end of an event.</p>

<p><a name="event mail box"><b>event mail box</b>
</a><br>The event message queue.</p>

<p><a name="event message queue"><b>event message queue
</b></a><br>The message queue used for notification from the system about thread interrupts and other events.  The osSetEventMsg() function provides notification on the system side concerning what message to send to which message queue for any given event.</p>

<p><a name="event notifier"><b>event notifier</b>
</a><br> = event notifier.</p>

<p><a name="exception"><b>exception</b></a><br></p>
<p><a name="exception handler"><b>exception handler</b>
</a><br></p>

<p><a name="exception vector"><b>exception vector</b>
</a><br></p>

<p><a name="fault"><b>fault</b></a><br></p>

<p><a name="fault handler"><b>fault handler</b></a><br> --> <a href="#system fault handler">system fault handler</a></p>

<p><a name="fault thread"><b>fault thread</b></a>
<br></p>

<p><a name="fault thread context"><b>fault thread context
</b></a><br></p>

<p><a name="fetch"><b>fetch</b></a><br>
The act of getting data.</p>

<p><a name="field"><b>field</b></a><br>
In the interlacing method, a complete image (or frame) on the video screen is produced by first scanning the even-numbered horizontal lines in what is called the first field, and then scanning the odd-numbered lines in the second field.</p>
<p><a name="FIFO"><b>FIFO</b></a><br>
= First-In, First-Out.  A method of processing which gives priority to items first added to the queue.</p>

<p><a name="filter kernel"><b>filter kernel
</b></a><br></p>

<p><a name="fixed point"><b>fixed point</b></a><br></p>

<p><a name="flag field"><b>flag field</b></a><br>
</p>

<p><a name="flipping parameter"><b>flipping parameter
</b></a><br></p>

<p><a name="flush back"><b>flush back</b></a><br>
Transferring data from the CPU's on-chip data cache back to main memory.</p>

<p><a name="frame buffer"><b>frame buffer</b></a>
<br></p>

<p><a name="fully associative"><b>fully associative
</b></a><br>A method that allows data from any address in associative memory to be mapped to any location in cache.</p>

<p><a name="Fun controller pak series"><b>Fun controller pak series</b></a><br></p>

<p><a name="game code"><b>game code</b></a><br>
A four-character code beginning with "N" that identifies N64 software.  The code is completely unique, and the fourth character can be used to identify the country of origin (example: Super Mario 64 = NSMJ).</p>

<p><a name="game note"><b>game note</b></a><br></p>
<p><a name="game preamble code"><b>game preamble code</b></a><br>The code added by makerom to clear the Bss, set the stack pointer and jump to the boot entry routine.</p>

<p><a name="game shop debugger"><b>game shop debugger
</b></a><br> --> <a href="#gvd">gvd</a></p>

<p><a name="GBI structure"><b>GBI structure</b></a><br></p>

<p><a name="gio interrupt"><b>gio interrupt</b></a><br></p>

<p><a name="global data area"><b>global data area
</b></a><br>A global data region that can be used by all functions, and not just internally by some function.</p>

<p><a name="graphics microcode"><b>graphics microcode
</b></a><br>The microprogram assembled together in the processor for use in the execution of various graphics processes.</p>

<p><a name="graphics (RCP) overrun"><b>graphics (RCP) overrun</b></a><br>The condition where the processing of a graphics task in the RSP is not completed in 1 blank.</p>

<p><a name="graphics task"><b>graphics task</b></a><br>A graphics task collects various graphics processes (the graphics display list) together into a series of procedures.  It is created by the CPU and processed by the RCP.</p>

<p><a name="grid"><b>grid</b></a><br>
A two-dimensional grid of fixed size.  This is used to divide a two-dimensional area into small regions.  By changing the structure of the grid and by discarding much of the unneeded geometry, processing can be reduced.<br>
<img src="../gif/grid.gif"></p>

<p><a name="grid database structure"><b>grid database structure</b></a><br></p>

<p><a name="gvd"><b>gvd</b></a><br>
The debugger that operates on the developmental workstation in the host and communicates with the emulator board through the dbgif program.</p>

<p><a name="handle"><b>handle</b></a><br></p>

<p><a name="handling capability"><b>handling capability
</b></a><br></p>

<p><a name="hardware register"><b>hardware register
</b></a><br></p>

<p><a name="heap"><b>heap</b></a><br>
The area of memory that is dynamically allocated to meet the changing needs of the application.</p>

<p><a name="hierarchical culling"><b>hierarchical culling</b></a><br></p>

<p><a name="idle thread"><b>idle thread</b></a><br>The lowest priority thread. It does nothing except when the other threads are not operating. The N64 operating system hangs if there is no idle thread.</p>

<p><a name="IMEM"><b>IMEM</b></a><br>Instruction Memory.</p>

<p><a name="in-circuit debug monitor"><b>in-circuit debug monitor</b></a><br></p>

<p><a name="in-line model"><b>in-line model</b></a><br>A method that directly includes the concluded commands in the main routine without using subroutines.</p>

<p><a name="instance"><b>instance</b></a><br>
Refers mainly to such elements as variables and objects that make up the data.
</p>

<p><a name="instruction address"><b>instruction address
</b></a><br>The effective address of the program command.</p>

<p><a name="instruction cache"><b>instruction cache</b>
</a><br>A cache that temporarily holds the program commands. It improves the performance of the command call.</p>

<p><a name="instruction memory"><b>instruction memory</b></a><br> --> <a href="#IMEM">IMEM</a></p>

<p><a name="internal divisor"><b>internal divisor</b></a><br></p>

<p><a name="internal FIFO"><b>internal FIFO</b></a><br></p>

<p><a name="interrupt"><b>interrupt</b></a><br></p>
<p><a name="interrupt event"><b>interrupt event</b></a><br></p>

<p><a name="interval timer"><b>interval timer</b></a><br>A timer that sends a signal at each constant interval.</p>

<p><a name="I/O"><b>I/O</b></a><br> = Input/Output
</p>

<p><a name="I/O component"><b>I/O component</b></a><br></p>

<p><a name="I/O request"><b>I/O request</b></a><br></p>

<p><a name="I/O sub system"><b>I/O sub system</b></a><br></p>

<p><a name="kernel"><b>kernel</b></a><br>
The core of the operating system, performing such tasks as the allocation of system resources.</p>

<p><a name="latency"><b>latency</b></a><br>
The time lag between when an address is input to memory and when data is output.</p>

<p><a name="linkage editor"><b>linkage editor
</b></a><br>A tool for linking and editing a number of target programs in order to create one machine-language program.  Determines addresses and links run-time libraries, etc.</p>

<p><a name="link editor"><b>link editor</b></a><br></p>

<p><a name="lock up"><b>lock up</b></a><br>Hang.
</p>

<p><a name="logging event"><b>logging event</b></a><br></p>

<p><a name="map"><b>map</b></a><br>
To locate data in a corresponding way from ROM to main memory, or from main memory to cache, etc.</p>

<p><a name="mask bit"><b>mask bit</b></a><br></p>

<p><a name="memory interface"><b>memory interface
</b></a><br> --> <a href="#MI">MI</a></p>

<p><a name="memory map"><b>memory map</b></a><br>
</p>

<p><a name="message"><b>message</b></a><br>
Messages are used to send and receive information among numerous threads and to control the execution of threads.  By sending and receiving threads, a higher-priority thread waiting for a message can be swapped for an executable thread.  Threads can use messages to communicate with each other and to synchronize their actions.</p>

<p><a name="message block request"><b>message block request</b></a><br></p>

<p><a name="message queue"><b>message queue</b></a><br>The queue for holding messages.  A message queue is specified when a message is sent.</p>

<p><a name="MI"><b>MI</b></a><br>
= Memory Interface.  Sends pixel data back and forth between memory and frame buffer.</p>

<p><a name="microcode"><b>microcode</b></a><br>
Microprogram instructions put together in the processor (RCP) to control the actions of logic units, registers, control flags, etc.  By substituting different microcode you can add and modify functionality.</p>

<p><a name="microcode engine"><b>microcode engine
</b></a><br>Hardware that uses microcode to perform processes.</p>

<p><a name="mixed symbol table"><b>mixed symbol table
</b></a><br></p>

<p><a name="multiplexor"><b>multiplexor</b></a><br>A device that can select the necessary item from numerous inputs and make one output.</p>

<p><a name="multi thread view"><b>multi thread view
</b></a><br></p>

<p><a name="multi wave"><b>multi wave</b></a><br>
Refers to the use of a number of waves by a single application.</p>

<p><a name="mutual exclusion"><b>mutual exclusion</b></a><br>A safeguard technique: while a device is involved in some I/O process, all other I/O processes regarding that device are excluded.</p>

<p><a name="N64 development board"><b>N64 development board</b></a><br>--> <a href="#N64 emulator board">N64 emulator board</a></p>
<p><a name="N64 development software"><b>N64 development software</b></a><br></p>

<p><a name="N64 emulator board"><b>N64 emulator board
</b></a><br>A board that emulates the NINTENDO 64.  It is inserted into the gio bus of an SGI INDY workstation.  16 Mbytes of so-called RAMROM emulate the game pak ROM.  Applications created with the INDY can be run by downloading them to this board.</p>

<p><a name="N64 OS"><b>N64 OS</b></a><br></p>

<p><a name="naming"><b>naming</b></a><br>
The act of associating a name (identification data) with a device used in a program.</p>

<p><a name="NMI"><b>NMI</b></a><br>
Short for non-maskable interrupt.</p>

<p><a name="NMI reset"><b>NMI reset</b></a><br>
</p>

<p><a name="non maskable interrupt"><b>non maskable interrupt</b></a><br> --> <a href="#NMI">NMI</a></p>

<p><a name="note"><b>note</b></a><br>
The name for a file created in a Controller Pak. Game note.</p>

<p><a name="note extension"><b>note extension</b></a><br>
</p>

<p><a name="note name"><b>note name</b></a><br></p>
<p><a name="object state"><b>object state</b></a>
<br></p>

<p><a name="oct tree"><b>oct tree</b></a><br>
The three-dimensional expansion of a quad tree.</p>

<p><a name="OS synchronization"><b>OS synchronization
</b></a><br></p>

<p><a name="overhead"><b>overhead</b></a><br>
Processing time that is not directly related to the user program. It is the time used by the operating system to allocate or manage system resources and control processes.</p>

<p><a name="overlap"><b>overlap</b></a><br>When a number of processes overlap.</p>

<p><a name="overlay"><b>overlay</b></a><br>
A method for executing a large program, in which the program is divided into functional blocks, and parts are overwritten to main memory and executed as necessary.</p>

<p><a name="overrun"><b>overrun</b></a><br>When an executing process exceeds the prescribed processing time needed for a single process. </p>

<p><a name="page mask register"><b>page mask register
</b></a><br>A register to set the page size (4K, 16K, 64K, 256K, 1M, 4M, 16M) of each TLB (Translation Lookaside Buffer) entry.</p>

<p><a name="paging"><b>paging</b></a><br>
A method of making more effective use of memory space by dividing a program into a number of "pages" of appropriate size, and only loading pages when they are needed.  This differs from the segment method in that the program is properly divided into blocks of fixed size.  This makes for a higher memory space utilization rate, but it is harder for the program to handle.</p>

<p><a name="parallel interface"><b>parallel interface
</b></a><br> --> <a href="#PI">PI</a></p>

<p><a name="parallelism"><b>parallelism</b></a><br>Parallel structures.</p>

<p><a name="patch"><b>patch</b></a><br>
A program that you insert into an existing program to make additions and/or corrections.  Used to fix bugs and add functions.</p>

<p><a name="performance profiling"><b>performance profiling</b></a><br> --> <a href="#profiler">profiler</a></p>

<p><a name="physical memory mapping"><b>physical memory mapping</b></a><br></p>

<p><a name="PI"><b>PI</b></a><br>Parallel Interface.</p>

<p><a name="PI bus"><b>PI bus</b></a><br>
The route used for data transfers between RDRAM and a mass storage device.  In the N64 it is an AD16 bus.</p>

<p><a name="PI domain"><b>PI domain</b></a><br>The region of address space accessible with the PI.</p>

<p><a name="PI handler"><b>PI handler</b></a><br>
The handler that manages control information for access to the PI bus.</p>

<p><a name="PI manager"><b>PI manager</b></a><br>
The device manager for processing all DMA operations involving transfers to and from a mass storage device (game pak ROM, etc.).</p>

<p><a name="pipeline structure"><b>pipeline structure</b></a><br>A technique that speeds up execution by overlapping processes in the CPU. That is, mixed component elements from various processes are piped in to the CPU continuously from the pipeline. No time is wasted.<br>
<img src="../gif/pipeline.gif"></p>

<p><a name="pop"><b>pop</b></a><br>
The act of taking a data element off the current stack pointer.</p>

<p><a name="portal connection"><b>portal connection</b></a><br></p>

<p><a name="position independent code"><b>position independent code </b></a><br>Code that can be addressed anywhere.</p>

<p><a name="power on reset"><b>power on reset
</b></a><br></p>

<p><a name="preemption"><b>preemption</b></a><br>--> <a href="#preemptive system">preemptive system</a></p>

<p><a name="preemptive system"><b>preemptive system
</b></a><br>A system that can interrupt a process that is currently executing in order to give the CPU over to the execution of a process of higher priority.</p>

<p><a name="PreNMI"><b>PreNMI</b></a><br>
The interrupt to the CPU that is generated when the N64 reset switch is pushed.  When a PreNMI is generated, that means that an NMI will follow in around 0.5 second, so preparations must be made, such as saving the currently executing process.</p>

<p><a name="preprocessor"><b>preprocessor</b></a><br>A program that performs preliminary processing before compilation.  This is used to expand functionality without modifying the compiler.</p>

<p><a name="primitive array"><b>primitive array</b></a><br></p>

<p><a name="procedure"><b>procedure</b></a><br>
A sequence of commands and data.</p>

<p><a name="profiler"><b>profiler</b></a><br>
A tool for measuring various kinds of performance information, including the number of times each resource is called and executed and the amount of time spent executing.</p>

<p><a name="profile screen"><b>profile screen</b></a><br></p>

<p><a name="profiling"><b>profiling</b></a><br>
</p>

<p><a name="push"><b>push</b></a><br>
The act of putting a data element onto the current stack pointer. (The stack has a FIFO structure.)</p>

<p><a name="quad tree"><b>quad tree</b></a><br>Where a two-dimensional region is divided into a hierarchical structure comprising grids of different sizes.<br><img src="../gif/tree.gif"></p>

<p><a name="ramrom memory"><b>ramrom memory</b></a><br>The DRAM on the development board that is used in place of game pak ROM during the game development process.</p>

<p><a name="rasterizer"><b>rasterizer</b></a><br> --> <a href="#RS">RS</a></p>

<p><a name="RCP"><b>RCP</b></a><br>
= Reality Co-Processor.</p>

<p><a name="RCP task scheduler"><b>RCP task scheduler
</b></a><br>Controls the execution order of tasks processed in the RCP.  There are two kinds of tasks: graphics tasks and audio tasks, and the latter have priority of execution.  If an audio task arises during the execution of a graphics task, the graphics task is interrupted and execution of the audio task is given priority.</p>

<p><a name="RDB interrupt"><b>RDB interrupt</b></a><br>The interrupt utilized internally for communications between the development board and the INDY.</p>

<p><a name="rdb output buffer"><b>rdb output buffer</b></a><br>The buffer utilized internally for communications between the development board and the INDY.</p>

<p><a name="RDB port"><b>RDB port</b></a><br>
The port that connects the INDY with the development board.</p>

<p><a name="RDP"><b>RDP</b></a><br>
= Reality Display Processor.</p>

<p><a name="RDRAM"><b>RDRAM</b></a><br>
= RAMBUS-DRAM.  A type of memory developed by the U.S. company Rambus.  RDRAM realizes faster data transfers (maximum of 500 MBps) than conventional DRAM.</p>

<p><a name="real time preemptive"><b>real time preemptive
</b></a><br> --> <a href="#preemptive system">preemptive system</a></p>

<p><a name="region"><b>region</b></a><br></p>

<p><a name="region allocation routine"><b>region allocation routine</b></a><br></p>

<p><a name="region control header"><b>region control header</b></a><br></p>

<p><a name="region ID"><b>region ID</b></a><br></p>
<p><a name="request"><b>request</b></a><br></p>

<p><a name="requester"><b>requester</b></a><br>
The request-side thread.</p>

<p><a name="resolution file"><b>resolution file
</b></a><br></p>

<p><a name="resource"><b>resource</b></a><br>
Something used by a thread or a task. For example, the CPU, memory, an I/O device, and the RCP are all resources.</p>

<p><a name="resource manager"><b>resource manager
</b></a><br></p>

<p><a name="retrace interrupt"><b>retrace interrupt</b></a><br>The interrupt process for when a vertical synchronization signal is generated.</p>

<p><a name="retrace message"><b>retrace message</b></a><br></p>

<p><a name="retrace number"><b>retrace number</b></a><br></p>

<p><a name="rmon"><b>rmon</b></a><br></p>

<p><a name="rmon debug thread"><b>rmon debug thread</b></a><br></p>

<p><a name="ROM address space"><b>ROM address space</b></a><br></p>

<p><a name="ROM image"><b>ROM image</b></a><br>
ROM data which can be viewed in a different location than the original address space (inside the game pak ROM).  The result is the same no mater which one is accessed.  It has the .n64 extension.</p>

<p><a name="ROM image packer"><b>ROM image packer</b></a><br></p>

<p><a name="ROM spec file"><b>ROM spec file</b></a><br>The file that describes the segment configuration of objects or unprocessed data files. It is referred to when the ROM image is created.</p>

<p><a name="round robin scheduling"><b>Round Robin Scheduling </b></a><br>A method of scheduling which pays no attention to priority, where processes are swapped in cyclic order at fixed intervals.</p>

<p><a name="RS"><b>RS</b></a><br>
= Rasterizer.  Generates the x,y coordinates of pixels and their attributes.  The attributes that come out of the RS are: R, G, B, A, Z, S/W, T/W, 1/W, L and pixel.</p>

<p><a name="RSP"><b>RSP</b></a><br>
= Reality Signal Processor.</p>

<p><a name="rumble pak"><b>rumble pak</b></a><br>
One of the products in the Fun Controller Pak series.  The Rumble Pak fits into the backside of the Controller Pak and creates vibrations during a game, adding an extra touch of realism to the game play.  It runs on a pair of AA batteries.
</p>

<p><a name="runnable state"><b>runnable state</b></a><br>A thread that can be run, or executed.</p>

<p><a name="running state"><b>running state</b></a><br>A thread that is running, or executing.</p>

<p><a name="run time data structure"><b>run time data structure</b></a><br></p>

<p><a name="run time library function"><b>run time library function</b></a><br>A function that is called from one program and inserted into another executing program to support some operation of that program.
</p>

<p><a name="run time performance"><b>run time performance</b></a><br></p>

<p><a name="sbc tool"><b>sbc tool</b></a><br>
A tool for collecting Type0 or compressed MIDI data together in a single file.</p>

<p><a name="scalar unit"><b>scalar unit</b></a><br> --> <a href="#SU">SU</a></p>

<p><a name="scan line"><b>scan line</b></a><br>
</p>

<p><a name="scheduler"><b>scheduler</b></a><br>
The thread that manages the order of execution of numerous threads and the allocation of devices and other system resources.</p>

<p><a name="scheduling"><b>scheduling</b></a><br>
The manager (thread) that decides the execution order of several threads or the allocation order of system resources.</p>

<p><a name="scheduling thread"><b>scheduling thread
</b></a><br></p>

<p><a name="segment"><b>segment</b></a><br>
A program is logically divided up (into functional modules, etc.) and only the necessary segment is loaded in order to make more effective use of memory space.  This differs from the paging method, in that it is easier to handle from the program, but the tradeoff is a drop in the memory utilization rate, since the length varies in size. </p>

<p><a name="segment address"><b>segment address
</b></a><br>The RDRAM address for the segment under the current control of the RSP (reality signal processor). The RSP microcode can control 16 segments. The segment address contains the segment ID and the offset, so the physical address is found by adding the segment offset to the base address, which is found by using the segment ID to search the segment base register.<br>
<img src="../gif/segment.gif"></p>

<p><a name="segment base register"><b>segment base register</b></a><br>A register related to the segment table. It holds the segment base address for a specific segment ID.</p>

<p><a name="segment offset"><b>segment offset</b></a><br> --> <a href="#segment address">segment address</a></p>

<p><a name="segment register"><b>segment register</b></a><br>The register used for specifying a segment address.</p>

<p><a name="segment table"><b>segment table</b></a><br>A table used for calculating the physical address of a program that is split into segments.</p>

<p><a name="semaphore"><b>semaphore</b></a><br>
An integer argument used for controlling the synthesis process in a multitasking system. It is similar to an event flag in that it controls the synthesis by using signals (integer flags) to flag the beginning and ending of processes to ensure that no synchronization problems occur.</p>

<p><a name="service routine"><b>service routine</b></a><br>Support programs for more efficient use of the system, such as utilities for creating and changing files, library editors for managing libraries, linkage editors and debuggers.</p>

<p><a name="set associative"><b>set associative</b></a><br>A method for splitting cache memory up into a number of parts and mapping the data in each address in main memory to fixed locations in the divided cache space.  When cache is split into two parts, it is called "2-way set associative."  When it is split up into as many parts as there are data region blocks, it is called "fully associative."</p>

<p><a name="shared resource"><b>shared resource</b></a><br></p>

<p><a name="SHVC"><b>SHVC</b></a><br>
The model name for the Super Famicon</p>

<p><a name="signal processor"><b>signal processor</b></a><br> --> <a href="#SP">SP</a></p>

<p><a name="sign on"><b>sign on</b></a><br>
Notification of start-up.</p>

<p><a name="sorting process"><b>sorting process</b></a><br>A method of reordering a collection of data elements according to some specified criterion.</p>

<p><a name="source level debugger"><b>source level debugger</b></a><br>A debugger that can debug a high-level language like C while checking the source code.</p>

<p><a name="SP"><b>SP</b></a><br> = Signal Processor.</p>

<p><a name="span buffer coherency problem"><b>span buffer coherency problem</b></a><br>When the same pixel is rendered in two consecutive spans, the second span does not wait for the completion of the first span, and it uses as its frame buffer input a frame buffer value that has not been processed by the first span.  The result is that it can read a wrong value, and then return an incorrect value to the frame buffer.</p>

<p><a name="SP segment address"><b>SP segment address</b></a><br>The way the RSP specifies addresses.  Each address is comprised of the segment ID (coded in a 3 bit word) and the segment offset.  You get the physical address by adding the segment offset to the segment base address obtained with the segment ID.</p>

<p><a name="stack"><b>stack</b></a><br>
Temporary memory that has a LIFO (last in first out) structure. You pop the stack to remove a data element and push the stack to add a data element.</p>

<p><a name="stall cycle"><b>stall cycle</b></a><br>Refers to the time when the CPU has to wait, for example when the CPU is accessing RDRAM and there is a cache error.</p>

<p><a name="static data segment"><b>static data segment</b></a><br></p>

<p><a name="static stack process"><b>static stack process </b></a><br></p>

<p><a name="stopped state"><b>stopped state</b></a><br>A thread that is halted.</p>

<p><a name="streaming"><b>streaming</b></a><br></p>
<p><a name="stride control"><b>Stride control</b></a><br>Control over boundary-aligned data in memory in such a way that it is read contiguously and concatenated for treatment as a large data block.</p>

<p><a name="SU"><b>SU</b></a><br>
= Scalar Unit.</p>

<p><a name="subset"><b>subset</b></a><br>
The essential parts taken from the OS system after excluding unnecessary parts for a given specification.</p>

<p><a name="suffix"><b>suffix</b></a><br>Suffix</p>
<p><a name="swap clock"><b>swap clock</b></a><br>
CPU processing time is divided up and allocated to a sequence of executable processes.</p>

<p><a name="symbol table"><b>symbol table</b></a><br>The table associating symbols (names) with program and data segments and other information.</p>

<p><a name="synchronous I/O"><b>synchronous I/O </b></a><br>I/O that completes within the thread requesting the I/O.</p>

<p><a name="system call"><b>system call</b></a><br>Executing an OS function from the program.  Also, the phrase used to indicate each call of an OS function.</p>

<p><a name="system exception handler"><b>system exception handler</b></a><br> --> <a href="#system fault handler">system fault handler</a></p>

<p><a name="system execution queue"><b>system execution queue</b></a><br>The queue holding those system threads (from among all the threads making up the system) that are in an executable state.</p>

<p><a name="system fault handler"><b>system fault handler</b></a><br>The system that manages interrupts and other exceptions. In the N64 operating system, when an exception occurs, this handler sends a message to the appropriate message queue after looking up the message queue and message from the corresponding event table.</p>

<p><a name="system thread"><b>system thread</b></a><br>Threads that control DMA or I/O operations in the same way that device manager threads such as the PI Manager or VI Manager manage devices.</p>

<p><a name="tag number"><b>tag number</b></a><br>
</p>

<p><a name="target break point"><b>target break point
</b></a><br></p>

<p><a name="task"><b>task</b></a><br></p>

<p><a name="task header"><b>task header</b></a><br></p>

<p><a name="task header structure"><b>task header structure</b></a><br></p>

<p><a name="task list"><b>task list</b></a><br>
The dynamic list that specifies the RSP's operating procedure.</p>

<p><a name="task management"><b>task management</b></a><br></p>

<p><a name="task waiting queue"><b>task waiting queue</b></a><br></p>

<p><a name="TCB"><b>TCB</b></a><br>
= Thread Control Block.</p>

<p><a name="texture unit"><b>texture unit
</b></a><br> --> <a href="#TU:TX+TF">TU:TX+TF</a></p>

<p><a name="TF"><a name="TU:TX+TF"><b>TF</b></a><br> = Texture Filter.</p>

<p><a name="thread"><b>thread</b></a><br>
In the N64 OS, a thread is the basic processing unit run in the CPU.  Threads function in a preemptive system.</p>

<p><a name="thread context"><b>thread context
</b></a><br></p>

<p><a name="thread control block"><b>thread control block </b></a><br> --> <a href="#TCB">TCB</a></p>

<p><a name="tiling"><b>tiling</b></a><br></p>

<p><a name="TLB"><b>TLB</b></a><br>
= Translation Lookaside Buffer.</p>

<p><a name="TLB entry"><b>TLB entry</b></a><br></p>
<p><a name="topology"><b>topology</b></a><br>
The geometric shape.</p>

<p><a name="trade off"><b>trade off</b></a><br>
A situation where if you are going to have this work well, then that other thing is not going to fly.</p>

<p><a name="turbo object"><b>turbo object
</b></a><br></p>

<p><a name="turbo object state"><b>turbo object state
</b></a><br></p>

<p><a name="turbo object state structure"><b>turbo object state structure</b></a><br></p>

<p><a name="TX"><strong>TX</strong></a><br></p>

<p><a name="uninitialized data"><b>uninitialized data</b></a><br> --> <a href="#Bss">Bss</a></p>

<p><a name="user interaction process"><b>user interaction process</b></a><br></p>

<p><a name="variable TLB page size"><b>variable TLB page size</b></a><br>The TLB page size can be changed for each entry to be either 4KB, 16KB, 64KB, 256KB, 1MB or 16MB.</p>

<p><a name="vectorization"><b>vectorization</b></a><br></p>

<p><a name="vector operation unit"><b>vector operation unit</b></a><br>One of the units comprising the RSP.  It has eight 16-bit product-sum operator units.</p>

<p><a name="vector unit"><b>vector unit</b></a><br>--> <a href="#VU">VU</a></p>

<p><a name="vertical retrace"><b>vertical retrace</b></a><br>Vertical synchronization of scan lines on the TV screen.</p>

<p><a name="vertical retrace interrupt"><b>Vertical retrace interrupt</b></a><br></p>

<p><a name="VI"><b>VI</b></a><br> = Video Interface.</p>

<p><a name="video interface"><b>video interface</b></a><br> --> <a href="#VI">VI</a></p>

<p><a name="video retrace interval"><b>Video retrace interval</b></a><br>Vertical retrace interval.</p>

<p><a name="VI manager"><b>VI manager</b></a><br>
= VIM.</p>

<p><a name="virtual address"><b>virtual address</b></a><br>An address in "virtual" memory space beyond the actual physical memory.  Supported by the memory management unit.  If the called data is in physical memory it is used as-is, but from the point of view of the user, it seems like all one big memory space.</p>

<p><a name="virtual address translation"><b>virtual address translation</b></a><br>The process of mapping virtual address space into physical address space.</p>

<p><a name="virtual ROM"><b>virtual ROM</b></a><br></p>

<p><a name="VU"><b>VU</b></a><br>
= Vector Unit.</p>

<p><a name="wait state"><b>wait state</b></a><br>
A thread that is waiting.</p>

<p><a name="wave"><b>wave</b></a><br>
Refers to a wave statement defined in the spec file.  Segments that have already been defined are registered inside the wave.  The segments registered inside the wave can use the same symbol.</p>

<p><a name="word swap"><b>word swap</b></a><br>
</p>

<p><a name="write back"><b>write back</b></a><br>
--> <a href="#write back cache">write back cache</a>(antonym: write-through)</p>
<p><a name="write back cache"><b>write back cache
</b></a><br>The method of at first writing data to cache memory when data is to be loaded, and then writing it back to main memory when cache memory overflows.  The method speeds up processing, since it cuts down on the frequency of writing to slower-access main memory.  This is also the name for that type of cache memory. </p>

<p><a name="write back caching"><b>write back caching
</b></a><br> --> <a href="#write back cache">write back cache</a></p>

<p><a name="yield"><b>yield</b></a><br>
</p>

</body>
</html>
